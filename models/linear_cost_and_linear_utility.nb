(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    200160,       4039]
NotebookOptionsPosition[    197991,       3963]
NotebookOutlinePosition[    198375,       3980]
CellTagsIndexPosition[    198332,       3977]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Introduction", "Title",
 CellChangeTimes->{{3.622110383099625*^9, 3.6221103896583967`*^9}}],

Cell["\<\
Firms differ in the value that they place on different dimensions of worker \
input and workers differ in the cost of providing the different dimensions of \
input. To give an example from academic, some schools care mostly about \
research, some school care mostly about teaching and some skills have a \
mixture. Individuals also differ in how costly it is to provide these \
different  \
\>", "Text",
 CellChangeTimes->{{3.622110395902678*^9, 3.62211051469176*^9}}],

Cell["\<\
Suppose there are two dimensions to some task, x1 and x2. Firms differ \
(according to a parameter \[Gamma]) in how much they value x1 and x2.  \
\>", "Text",
 CellChangeTimes->{{3.622107452416875*^9, 3.622107495067875*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", 
    RowBox[{"x1_", ",", "x2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"\[Gamma]", "*", "x1"}], " ", "+", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", "\[Gamma]"}], ")"}], "*", "x2"}]}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.6221071582786617`*^9, 3.622107190979292*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "[", 
      RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", "1"}], ",", "x2"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6221072015110903`*^9, 3.6221072563796053`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x2", "\[Rule]", 
    FractionBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"x1", " ", "\[Gamma]"}]}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", "\[Gamma]"}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.622107212156815*^9, 3.622107257197701*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"x2Star", "[", "x1_", "]"}], ":=", 
  RowBox[{"x2", "/.", 
   RowBox[{"sol", "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6221072577310123`*^9, 3.622107306525051*^9}}],

Cell[BoxData[
 RowBox[{"x2Star", "[", "x1", "]"}]], "Input",
 CellChangeTimes->{{3.6221072935096617`*^9, 3.6221072967188663`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     FractionBox[
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"x1", " ", "\[Gamma]"}]}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "\[Gamma]"}]], ",", 
     RowBox[{"{", 
      RowBox[{"x1", ",", "0", ",", "10"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "10"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Gamma]", ",", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6221073100759487`*^9, 3.6221073788908052`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Gamma]$$ = 0.40900000000000003`, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Gamma]$$], 0.5}, 0, 1}}, Typeset`size$$ = {
    450., {146., 153.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Gamma]$93851$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`\[Gamma]$$ = 0.5}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Gamma]$$, $CellContext`\[Gamma]$93851$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Plot[(-1 + $CellContext`x1 $CellContext`\[Gamma]$$)/(-1 + $CellContext`\
\[Gamma]$$), {$CellContext`x1, 0, 10}, PlotRange -> {0, 10}], 
      "Specifications" :> {{{$CellContext`\[Gamma]$$, 0.5}, 0, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{505., {200., 207.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.622107324063035*^9, 3.622107380418251*^9}}]
}, Open  ]],

Cell["Workers differ in their output:   ", "Text",
 CellChangeTimes->{{3.6221075463960333`*^9, 3.6221075497763157`*^9}, {
  3.622107581877172*^9, 3.622107603558632*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"c", "[", 
    RowBox[{"x1_", ",", "x2_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"\[Theta]", "*", "x1"}], " ", "+", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", "\[Theta]"}], ")"}], "*", "x2"}]}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.622107614017264*^9, 3.622107625354355*^9}}],

Cell[BoxData[
 RowBox[{"Y", ">", "0"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Gamma]", ">", "0"}], ",", 
  RowBox[{"\[Gamma]", "<", "1"}], " ", ",", " ", 
  RowBox[{"\[Theta]", ">", "0"}], " ", ",", " ", 
  RowBox[{"\[Theta]", "<", "1"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"Minimize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{"x1", ",", "x2"}], "]"}], ",", 
      RowBox[{
       RowBox[{"y", "[", 
        RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", "Y"}], ",", 
      RowBox[{"x1", ">=", "0"}], ",", " ", 
      RowBox[{"x2", ">=", "0"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x1", ",", "x2"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6221076709844*^9, 3.622107717962257*^9}, {
   3.622107795868816*^9, 3.622107809532707*^9}, 3.622107948589044*^9, {
   3.622107999736011*^9, 3.622108007596794*^9}, {3.622108054195147*^9, 
   3.622108068029952*^9}, {3.622108168235341*^9, 3.622108192178483*^9}, {
   3.622108278808076*^9, 3.622108304524911*^9}, {3.622108361299815*^9, 
   3.62210838215232*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {"Y", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}]}]},
         {
          RowBox[{"-", 
           FractionBox["Y", 
            RowBox[{
             RowBox[{"-", "1"}], "+", "\[Gamma]"}]]}], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
             RowBox[{"\[Gamma]", ">", "1"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
             RowBox[{"\[Gamma]", "<", "0"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}]}]},
         {
          FractionBox["Y", "\[Gamma]"], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
             RowBox[{"\[Gamma]", ">", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
             RowBox[{"\[Gamma]", "<", "0"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}]}]},
         {
          FractionBox[
           RowBox[{"Y", " ", "\[Theta]"}], "\[Gamma]"], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", "<", "0"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"\[Gamma]", ">", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"\[Gamma]", "<", "0"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", ">", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}]}]},
         {
          FractionBox[
           RowBox[{
            RowBox[{"-", "Y"}], "+", 
            RowBox[{"Y", " ", "\[Theta]"}]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", "\[Gamma]"}]], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", "<", "0"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"\[Gamma]", ">", "1"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
             RowBox[{"\[Gamma]", "<", "0"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", ">", "1"}], "&&", 
             RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
             RowBox[{"Y", ">", "0"}]}], ")"}]}]},
         {
          RowBox[{"-", "\[Infinity]"}], 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"1", "<", "\[Gamma]", "<", "\[Theta]"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Theta]", "<", "\[Gamma]", "<", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", ">", "1"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
             RowBox[{"Y", "\[GreaterEqual]", "0"}]}], ")"}], "||", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"\[Theta]", "<", "0"}], "&&", 
             RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
             RowBox[{"Y", "\[GreaterEqual]", "0"}]}], ")"}]}]},
         {"\[Infinity]", 
          RowBox[{"!", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
               RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
               RowBox[{"\[Gamma]", "<", "0"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", ">", "1"}], "&&", 
               RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
               RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"1", "<", "\[Gamma]", "<", "\[Theta]"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Theta]", "<", "\[Gamma]", "<", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", ">", "1"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
               RowBox[{"Y", "\[GreaterEqual]", "0"}]}], ")"}], "||", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Theta]", "<", "0"}], "&&", 
               RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
               RowBox[{"Y", "\[GreaterEqual]", "0"}]}], ")"}]}], ")"}]}]},
         {"0", 
          TagBox["True",
           "PiecewiseDefault",
           AutoDelete->True]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}},
        Selectable->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x1", "\[Rule]", 
      TagBox[GridBox[{
         {"\[Piecewise]", GridBox[{
            {"1", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
                RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}]}]},
            {"Indeterminate", 
             RowBox[{"!", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], 
                  "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], 
                  "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], 
                  "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], 
                  "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}]}], ")"}]}]},
            {"Y", 
             RowBox[{
              RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
              RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
              RowBox[{"Y", ">", "0"}]}]},
            {
             FractionBox["Y", "\[Gamma]"], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}]}]},
            {
             FractionBox[
              RowBox[{
               RowBox[{"-", "Y"}], "+", 
               RowBox[{"Y", " ", "\[Theta]"}]}], 
              RowBox[{"2", " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "\[Gamma]"}], ")"}], " ", 
               "\[Theta]"}]], 
             RowBox[{
              RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
              RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
              RowBox[{"Y", ">", "0"}]}]},
            {
             FractionBox[
              RowBox[{
               RowBox[{"-", "Y"}], "-", "\[Theta]", "+", 
               RowBox[{"Y", " ", "\[Theta]"}], "+", 
               RowBox[{"\[Gamma]", " ", "\[Theta]"}]}], 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "\[Gamma]"}], ")"}], " ", 
               "\[Theta]"}]], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}]}]},
            {"0", 
             TagBox["True",
              "PiecewiseDefault",
              AutoDelete->True]}
           },
           AllowedDimensions->{2, Automatic},
           Editable->True,
           
           GridBoxAlignment->{
            "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{1.}}, "RowsIndexed" -> {}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], {
                Offset[0.84]}, 
               Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
               Offset[0.2], {
                Offset[0.4]}, 
               Offset[0.2]}, "RowsIndexed" -> {}},
           Selectable->True]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.35]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       "Piecewise",
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], ",", 
     RowBox[{"x2", "\[Rule]", 
      TagBox[GridBox[{
         {"\[Piecewise]", GridBox[{
            {"1", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
                RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}]}]},
            {"Indeterminate", 
             RowBox[{"!", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], 
                  "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], 
                  "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Theta]", "<", "\[Gamma]", "\[LessEqual]", "1"}], 
                  "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"0", "<", "\[Gamma]", "\[LessEqual]", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], 
                  "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", ">", "1"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"\[Theta]", "<", "0"}], "&&", 
                  RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                  RowBox[{"Y", "<", "0"}]}], ")"}]}], ")"}]}]},
            {"Y", 
             RowBox[{
              RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
              RowBox[{"\[Gamma]", "\[Equal]", "0"}], "&&", 
              RowBox[{"Y", ">", "0"}]}]},
            {
             RowBox[{"-", 
              FractionBox["Y", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "\[Gamma]"}]]}], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "0"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "\[Equal]", "1"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", ">", "\[Theta]"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "1"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                RowBox[{"0", "\[LessEqual]", "\[Gamma]", "<", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
                RowBox[{"\[Gamma]", "<", "0"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", ">", "1"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "<", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}]}]},
            {
             RowBox[{"-", 
              FractionBox["Y", 
               RowBox[{"2", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"-", "1"}], "+", "\[Gamma]"}], ")"}]}]]}], 
             RowBox[{
              RowBox[{"0", "<", "\[Theta]", "<", "1"}], "&&", 
              RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
              RowBox[{"Y", ">", "0"}]}]},
            {
             FractionBox["\[Theta]", 
              RowBox[{
               RowBox[{"-", "1"}], "+", "\[Theta]"}]], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "\[Equal]", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}]}]},
            {
             FractionBox[
              RowBox[{"Y", "-", "\[Theta]", "-", 
               RowBox[{"Y", " ", "\[Theta]"}], "+", 
               RowBox[{"\[Gamma]", " ", "\[Theta]"}]}], 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "\[Gamma]"}], ")"}], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"-", "1"}], "+", "\[Theta]"}], ")"}]}]], 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", ">", "1"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", "<", "0"}]}], ")"}], "||", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"\[Theta]", "<", "0"}], "&&", 
                RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}], "&&", 
                RowBox[{"Y", ">", "0"}]}], ")"}]}]},
            {"0", 
             TagBox["True",
              "PiecewiseDefault",
              AutoDelete->True]}
           },
           AllowedDimensions->{2, Automatic},
           Editable->True,
           
           GridBoxAlignment->{
            "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{1.}}, "RowsIndexed" -> {}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], {
                Offset[0.84]}, 
               Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
               Offset[0.2], {
                Offset[0.4]}, 
               Offset[0.2]}, "RowsIndexed" -> {}},
           Selectable->True]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.35]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       "Piecewise",
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.622107719010437*^9, 3.6221078108331347`*^9, 3.6221080094106007`*^9, {
   3.622108056270047*^9, 3.6221080687917147`*^9}, 3.622108130492689*^9, {
   3.6221081706059227`*^9, 3.622108192834491*^9}, {3.622108299109043*^9, 
   3.6221083049180193`*^9}, 3.622108383493925*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Simplify", "[", 
   RowBox[{"sol", ",", 
    RowBox[{
     RowBox[{"\[Theta]", ">", "0"}], " ", "&&", " ", 
     RowBox[{"\[Theta]", "<", "1"}], " ", "&&", " ", 
     RowBox[{"Y", " ", ">", " ", "0"}], " ", "&&", " ", 
     RowBox[{"\[Gamma]", ">", "0"}], " ", "&&", " ", 
     RowBox[{"\[Gamma]", "<", "1"}]}]}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.62210829038223*^9, 3.622108342294293*^9}, {
  3.622108395741691*^9, 3.6221084039896393`*^9}, {3.6221087760459023`*^9, 
  3.6221087790384007`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[GridBox[{
      {"\[Piecewise]", GridBox[{
         {
          FractionBox[
           RowBox[{"Y", " ", "\[Theta]"}], "\[Gamma]"], 
          RowBox[{"\[Gamma]", ">", "\[Theta]"}]},
         {
          FractionBox[
           RowBox[{"Y", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", "\[Theta]"}], ")"}]}], 
           RowBox[{
            RowBox[{"-", "1"}], "+", "\[Gamma]"}]], 
          TagBox["True",
           "PiecewiseDefault",
           AutoDelete->True]}
        },
        AllowedDimensions->{2, Automatic},
        Editable->True,
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.84]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}},
        Selectable->True]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.35]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    "Piecewise",
    DeleteWithContents->True,
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x1", "\[Rule]", 
      TagBox[GridBox[{
         {"\[Piecewise]", GridBox[{
            {
             FractionBox["Y", "\[Gamma]"], 
             RowBox[{"\[Gamma]", ">", "\[Theta]"}]},
            {
             FractionBox["Y", 
              RowBox[{"2", " ", "\[Theta]"}]], 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}]},
            {"0", 
             TagBox["True",
              "PiecewiseDefault",
              AutoDelete->True]}
           },
           AllowedDimensions->{2, Automatic},
           Editable->True,
           
           GridBoxAlignment->{
            "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{1.}}, "RowsIndexed" -> {}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], {
                Offset[0.84]}, 
               Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
               Offset[0.2], {
                Offset[0.4]}, 
               Offset[0.2]}, "RowsIndexed" -> {}},
           Selectable->True]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.35]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       "Piecewise",
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], ",", 
     RowBox[{"x2", "\[Rule]", 
      TagBox[GridBox[{
         {"\[Piecewise]", GridBox[{
            {
             RowBox[{"-", 
              FractionBox["Y", 
               RowBox[{
                RowBox[{"-", "1"}], "+", "\[Gamma]"}]]}], 
             RowBox[{"\[Gamma]", "<", "\[Theta]"}]},
            {
             FractionBox["Y", 
              RowBox[{"2", "-", 
               RowBox[{"2", " ", "\[Gamma]"}]}]], 
             RowBox[{"\[Gamma]", "\[Equal]", "\[Theta]"}]},
            {"0", 
             TagBox["True",
              "PiecewiseDefault",
              AutoDelete->True]}
           },
           AllowedDimensions->{2, Automatic},
           Editable->True,
           
           GridBoxAlignment->{
            "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
             "Rows" -> {{1.}}, "RowsIndexed" -> {}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], {
                Offset[0.84]}, 
               Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
               Offset[0.2], {
                Offset[0.4]}, 
               Offset[0.2]}, "RowsIndexed" -> {}},
           Selectable->True]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}},
           "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.35]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
          "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}],
       "Piecewise",
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6221083303483*^9, 3.622108342835568*^9}, 
   3.6221084060824203`*^9, 3.622108779688121*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "[", 
   RowBox[{"\[Gamma]_", ",", "\[Theta]_", ",", "Y_"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"\[Gamma]", " ", ">", " ", "\[Theta]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Y", "/", "\[Gamma]"}], ",", "0"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"Y", "/", 
       RowBox[{"(", 
        RowBox[{"1", "-", "\[Gamma]"}], ")"}]}]}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.6221086504624643`*^9, 3.622108746686491*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"X", "[", 
  RowBox[{"2", ",", "1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.622108738472007*^9, 3.622108751877616*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.622108740364506*^9, 3.6221087523692923`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Y", "[", 
    RowBox[{"x1_", ",", "x2_", ",", "\[Gamma]_"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"\[Gamma]", "*", "x1"}], " ", "+", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", "\[Gamma]"}], ")"}], "*", "x2"}]}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.6221090659384727`*^9, 3.62210907819779*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"RegionPlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Y", "[", 
         RowBox[{"x1", ",", "x2", ",", "g1"}], "]"}], ">", "1"}], ",", 
       RowBox[{
        RowBox[{"Y", "[", 
         RowBox[{"x1", ",", "x2", ",", "g2"}], "]"}], ">", "1"}]}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"x1", ",", "0", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2", ",", "0", ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"g1", ",", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"g2", ",", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.622108922323237*^9, 3.622109032735429*^9}, {
  3.622109082360098*^9, 3.622109109320414*^9}, {3.622109168510714*^9, 
  3.62210918710222*^9}, {3.6221093654659653`*^9, 3.6221093793203373`*^9}, {
  3.622109416542736*^9, 3.622109417703699*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`g1$$ = 0.387, $CellContext`g2$$ = 
    0.5700000000000001, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`g1$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`g2$$], 0.5}, 0, 1}}, Typeset`size$$ = {
    450., {220., 228.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`g1$19782$$ = 
    0, $CellContext`g2$19783$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`g1$$ = 0.5, $CellContext`g2$$ = 0.5}, 
      "ControllerVariables" :> {
        Hold[$CellContext`g1$$, $CellContext`g1$19782$$, 0], 
        Hold[$CellContext`g2$$, $CellContext`g2$19783$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      RegionPlot[{$CellContext`Y[$CellContext`x1, $CellContext`x2, \
$CellContext`g1$$] > 
         1, $CellContext`Y[$CellContext`x1, $CellContext`x2, \
$CellContext`g2$$] > 1}, {$CellContext`x1, 0, 2}, {$CellContext`x2, 0, 2}], 
      "Specifications" :> {{{$CellContext`g1$$, 0.5}, 0, 
         1}, {{$CellContext`g2$$, 0.5}, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{505., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6221089667110443`*^9, 3.622109033539805*^9}, {
   3.622109090390123*^9, 3.62210910996299*^9}, 3.622109188202314*^9, {
   3.6221093672371397`*^9, 3.6221093799495163`*^9}, 3.622109418354773*^9}]
}, Open  ]],

Cell["\<\
If we assume that in a competetive equilibrium, firms of different types earn \
equal profits. \
\>", "Text",
 CellChangeTimes->{{3.6221094556144114`*^9, 3.622109479398868*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Y", "[", 
     RowBox[{"x1", ",", "x2", ",", "g1"}], "]"}], "\[Equal]", 
    RowBox[{"Y", "[", 
     RowBox[{"x1", ",", "x2", ",", "g2"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x1", ",", "x2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.622109233083683*^9, 3.622109254666995*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x2", "\[Rule]", "x1"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.622109247144907*^9, 3.622109255362558*^9}}]
}, Open  ]],

Cell["\<\
It doesn't matter what the prior distribution of types might be: the worker \
still chooses the safe, average level of output.  \
\>", "Text",
 CellChangeTimes->{{3.622110330646718*^9, 3.622110366253647*^9}}],

Cell["\<\
Workers have to decide: produce at the corner solution or produce at the safe \
level. \
\>", "Text",
 CellChangeTimes->{{3.6221096434060297`*^9, 3.622109669090419*^9}, 
   3.622110370525145*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "[", 
   RowBox[{
    RowBox[{"w", "/", "2"}], ",", 
    RowBox[{"w", "/", "2"}]}], "]"}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.62210995270826*^9, 3.622109977316044*^9}}],

Cell[BoxData[
 FractionBox["w", "2"]], "Output",
 CellChangeTimes->{{3.622109958285996*^9, 3.62210997806472*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "[", 
   RowBox[{
    RowBox[{"w", "/", "\[Gamma]"}], ",", "0"}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.622110022534429*^9, 3.622110066057561*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"w", " ", "\[Theta]"}], "\[Gamma]"]], "Output",
 CellChangeTimes->{{3.622110039386393*^9, 3.6221100664899387`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{"\[Theta]", "/", "\[Gamma]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Gamma]", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.622110093172357*^9, 3.622110120306662*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
gD/kDf2B/qC34JNczvfhDvoDBr3RHmDwPeqJds1zQ6O5Hu4r6jkufHyFK9uL
/Tvv1fqiKoT5Ldypx6Q/okOop/+cF7buqSTXj35edOylY3Txjsd7E6Ou0u9P
lsU6DHTk9g/E/Fjqfc1mrx58tuWL1UUU/pLvq8WDfenqiNhVu2z6LXr6Qt+P
XPzpyPQ2x39JL5H9ubFcjXh61Myh29R6Z51VnV/0meVnvK/mR6u+m9HmTFYx
dYzLcX/51i/0dMATdede9aZavdq3SvtlB32X3+qjH9sHU9+hCYlxA9R658NW
e+p8Is89bzVqssaTOjXrOMApL4+iZr0ZNbG2J43s81D8vkV5tDL26ZvTfvUi
14v52bOS8qlr+ZPD+5/xole+7DF1VF4+PVXn4ZKl5EOnmtZ9eWWnQrq2ZGTt
gY9epIGPpy776XohTeq8cEB/2/hP3s8q6Gcbf/WfV/92tMFz2139eCufF3aU
zpduar91URwNmD2966FH1XmLy4a36twt8TjPdy3a9GDOAxeaE/NM4q11KfRY
cr9HD0w+RZe8D1zql55CUSfXLB764ynm5xiL3mfI0aJ3GjVOnFu7sNtZmnYs
+PiJXumURnMa/PrseZrjse7R9knXqH6a736n+AB6p6p31x7ppZRa0cPp/WeC
KbBb402ZyeW06/N3wtr1DGG5y57+zJhJroHk3N53b8kvZVS58J9ZT3kF0wDH
4MKFiRW07QOn4ohbwXQ0yeVnt7436MYrib8+tj6U7efl1UfCxlSG0Jd1Jk2K
i62kxl7X5y2Ypc5vE/N9Ws53Kl3/+F6HoV+6sd4tdPp47oCugSz/hV3fCf89
O5j1gKDXPkmvCEmv/ZJeEZIeByU9LtOxXWc/XjTVhe3O2a98pw0b4832AvL/
rduYlr0fKyC6WbY05YEnx9vP1cq+U7ntItsPwY+rJD+6UieLXxfTZ21OfDO9
5AS1/yMiPWvxMrr7xyf9Wy11kv3vYz0q+FXtz2164s0TdYM2G3nUXyV9IumU
z5ctj9e5SCvd86tHpqnzsQR/nZPjOSbHE09Lzzfd2vL0CXrj9pZbRVkJtLX5
oYJH3zxBLq+PHNVlZQKF/H3xhdVHT9JP1HP1h8mJtGvGsj5L3U7SM1WDTp7O
TaSGU+d8fe7vs3S09fHPkhLT5fy7yvnPpA1Nhve++5Ab5dXZ8UFA/yxKGecS
47M3yDh/Lpj2dVz8Upsz5dSld0C106Zg+qruwbTnt1VIfRNGPpa+uUnHujvV
7rgzlBb+5v5xl6oqSrP405WCLf7MoJ1z1p5b9FIwtRy65OjwwnL6KHhVm33T
gyk8MmbHh6MqKCj73v6FxU70b9fFUw5dT6L6a0Zszp7gTOXvVv216fVkKujj
N31n7DzqtPClhoWHDkv9to31zrl/Fvcd8r43Za6+OKPVxAK6cO6t5afb+XN+
xL/TL3NSb3qwf/LpKL93tw2/QN8Pb+bRtjCX8hNK6y7ofoHi+j2yY8fVXPr2
h15L7yz2oeHOJ4e1+LKQFia9saf+D0doV75z1uw/r1C6JZ+Haa4ln1G0vcJz
Qbcr5+j63lj/F7Zeox1z+pVNS/Vlf/ecxa9Ohp96UvJrEq3c+cuZLo39qV3m
kBCnsWr9S/BHFbVOqbdgRWd1PsPmzY+ney0JpZ47prcbEldF/hb9vOkfi34F
tOzlh30Tv/Wm27GJi+osLyC/descerznT82eSNh6cl2JlGcP6uLebfGMtrlU
HDmrxX5/D8pIjp2XMSVXyqsr56/q//H73H8XBHO+5p2Nv3nvDTlAc9fMDl+V
comGrf0nOvOTc+y31ZtYN+83Lx/236pT6n7oOG8T5Vv85kOZudFdxjRX7/MK
e3FGxQGLm3bJeDeM41fBzwclP1+m347ur7fvy2NsR48/Uz3leIdN7NeJ9g6w
Hyz415WmWfybSakWv583znN0lfyeQVMKakV3axPMfs6HTT0fdnzUh/eXzYy/
/tqbz7tyfLfb4m9XamXxdwZ9bPG3K0Va/J1JEZa93UANpx/57IXtnnSwx/tX
6+3dQJ4b+4zcluBJ+b6nPWp/sov9mns/FL6VumYn9W3f9an7WcEUEfv96fnd
9rLfkjvVccvQMQ60rvWhRLrkRuct/neiLIv/k9iuCv4JlPZLvS/Sbl71gvI+
O+iLTqMdPggLoqb7Zy9/Zas7x2/nLfm2xZuWfOfQUUu+3elnS76vU7cH8Svi
lrvTiJ/u9V4Ve508rPny4Higa+zvZSHTV5DH8JVrtpw4LfFbw3mdtAF9+3/9
+Ao6s7TcYe1zp6V+Xc9+mtB/u6T+C5H6b5fUfyFS/+2W+i9U6r/dUv+Fchwt
9K+XlN+tUn59yb3Id8nc41vIe+m/z44IvUhNLHlYRY6/7q/X0fs85VUua9p4
zHLO6wh+28F68YHToK92tDjCfvfkN3+flfJLCK83bOn1dvaE9s68P3iFJY9O
dNeSxyT66nRym7GD1HlQLgPyHmky8gcqsOTjiJQPtf9Z6JdDlGPplyha8PHL
efP/cqS7W/5tufZKLFVa9vso5weOW/N1lBZZ8xVHTk3b/zw2fiFNnum1dvKK
Y1K/LmA/p1WHF/2vFl6gTN9F9adNyeN5yE+82mxFuzzq8e/3e0Me7KF4y18M
k8/vlfo5nMpnDR/ZJcOB8yYrLhXsC3Dy5P1fQl+vYL9B6ItD7Cf3sPjpKI20
+CmOvsk6/GZ/cqG5D3e61zw9Wdpv5NdS6DfLXztN8yx/LZUODmtcJ7H7Gd6v
JvTdGanv0mjhyZKI+9UXeD1gxs1TPs12r2K5F/K2WsqbK516/Or2ytBFnHfr
MCL+/o4FS1lvC3lcx3G64EcHyY/ukh8dJD+6S/qtlfTzkPRbJ+l3gVY4xu56
/K8jdHjPLxmLQqKpYNiJAdeyHendosf21z8QSzmWf+XIcVOzof3CYtsc5/yT
sGfHpT2Ll/bsuLRn8dK+nJH2JY2WtqmTULFU5Ttbfdjh8zVNA+jleWlX9/Uo
pcqOj8e26RdAy/8a/3LfMaW0y7Jnpzj+av/wznd+Tg+g6KafzXHMKaXyyu9m
r0wO4P0Cjxx7cWbfwXNpms/azbczdlPPRZcG5tjgY5G72gRl7qZKp88yvk71
53gx+fS3BRNPXySXHW3rZ48rIv9GDnNeDrrI+fTHf6tclDrCk/OJDWfPzD3e
2ou+btv87D8T8yn86cJxNErlt0c8fN8/8vtACnxizZyfR5fR3x7uWVUbAzlf
I/hrn+SvcMlf+ziOd95befyl02o/kJifrXJ+/OT8bJPzEyDjMTd6y4rHsmnX
0YePVo9zo6PTjz0/OjaLplr6wY3jW+jhJiNuP/9VeCltbNIjIPffYKL33rv7
4cc3aK/L7ucfcvGlUos/ium58Q6zV8/x5XxtyJGq9BUtfTlfJfx1N+mvZ7Mc
Cv1/XfoPKp95sfOnIS/17kbnrPIH/UJfvlTVpa/ah3oo7S3n2wPn0u3OF1Kv
zt5IY0/36RjSfy79cuPNVqunbyTfF3d/Nv+SJ3VbNNHhxMv5NPHnAd1fCvOk
DQ/mftjgpXx6qN72pU8MDyGHx5eXbUq4QYX767qkjw2hzPNJHwSV3qAxLS62
v/lRCOcjq5PyYp+xyfPY3zq80dsmz6Nzz+7+MfsUTXkub3+nL1Ip6Y8DtTye
DSTfuEujvZuX0SPXz09+5oT6fkDS+d5DAxoGSX+kjA797rej/uIgmmrFD+XU
Kbr0p92FgZx/mGzFf7+SkxX/RVL40eips3vt57zObpfxfnUWnuD8yDZJT8Q/
oK+3hFGuf7dKfZ8sQ8bh5vkwmRocyjDi9kyjPf27V+Z35vDdjnzuz3wfAOVb
ZX3zvJm2sr6nxMs8P9tbwq1H1Vl0KTm+xvlcXrIc49W/E6S+X4Tx6+Xqe0Xp
2u8VBn0qDPpUGHmtCoPuqh3A08802XTXUZ2XM/a5ZyoGTElh2Jzv/5pffdzR
DJvztVXLq+VzfcwP5uOCpJ+H7Bfw1v+gJ+iE9tM1+mUyvE3aeeRXTHiMhX8E
jaqe2/DLD1Loa4s+F6nwKf8DK/fgHDX1PZoMAy5/1s4Q/rShs2/p0Y1F9Hz9
lbZLnS9kFSer84V2HX7866JX1PkColyd513w9nXb5cH5J/Rnns8N+cB49e/h
1fx+S1sNRvyOddNN0j89K+mjvjsyS5aLeMKT1kxq4TCpxW76+VCJ7fKsUV+M
Y4vsx1vqlU0s94I+ar8+2sM4F/pfWuR/yZtG3Aj/4EZ4mmwviOMjT9kP8i0m
3PfqbdvlSZ/a/+bnUlRVzytVPb3ooYsvP3TxZC79LNsf+NUng75KzqMFjxW9
sTPNhwLf+qu49FfoE/k+Vv9YSV8XKrL4IUrOn9oPL+ZP7Ye/0L+R7TrO+bJv
5PO/3HV069cjiSqsB87QRotfUuT41fc5TDhDxj3I99yX9EA89sCA+1j4R1Cj
sNcfDasuohd2bxjz6mR1HpWg7yVJ3xKK2fz56vtvqPMHFkV8tjjis2AKs98W
l9KrEQ9nf7pBnV+F8SHfZsLdC7O+bv64eh9U5/8oWvFkL9vlxvnD8WnzbVcw
jUjqMSLph1yqdml+26V5ELU4E9/yzIcllNjlH9sVTAu2/LFgy09ldG/VpsG3
60XQjrCvgl+pV8T96/tHIlkfgx7QH+d/Gv7YjWfDqbur7T+dqijhwTfLLlA4
tftph1/UeKz3OBvv9zizno23FIYH8+P6Bx+Mjm7lwfwn4DCG5yybuT4rR32v
oZfzqt7OqwJ5vAcTht2dF6q+zzCpMN/1xDn1PYaxUj9BP78v42SsN6M9MV/X
KXXg82kDnw+i5eOeXDHuyRzJb/Ek1EwupayN/Ct+TApZ7DyqSPLTVbm+XCL7
vWqcN6n2v4cvLo9YXH6NPu5SPKpLcZnsP072XyX7v0orrP5vSjrslfRzlvTc
K/H1kXQ8zPkLuxYOid5Hk5fYJeci1xf6IZBGrvO49WT+Aer3QtyVkesiaJ5V
34XzIdBTVv3KFKnfPRlvwB0WvFW3i1OGGEelfN9/dA51trNbojfrX+i1IVIe
0T708YIpDz/5z0F/nm+0D3088ZeukS2m+LP/7hEW+PQHffw5H7tN+p1eMr4S
zy2Tv+OcNAepR0+wn4r6Nim3Xcspzs7mfZ2o1FLMe+Q9hBqXH7Fdh+iHD+vN
/7BeGNPX9o+NBGE07oeE95qP38n526JXwsfea7CNYTwPubLEMdGDXmgdarvS
yT77vZ09qPrpCb89PSGb5aN7qp3gWeQVOn3tko4+9NvYnntffC6f8RHzeZrS
LH45L/nlKrWT8bePVS9Ozu8+zj+I/p1k/3iv9TznuwT9T8j5vSLHc4zLhb05
SZb5+jmezq7vf259/5N0wvqLl7+70tt2vTEvXsqPK1lqPzyeXpf9j49NGReb
kiDth7O0H4mUIvGZH/TRj0EfpXF7lj52TafFln51Jeu2OJ2mNtn79sTf/Wn5
tTrTmrTIp79X9+pIL4RT/Tmjl77bupBes/oLo9qvxT/0WnyBbD+I7cEs6bdD
v3eW9Z+z6FNq2Af1/RdxL6UtazpNfaGRet9h7z77Xxh1CMzvGDi5krbJ8j/e
+6Tixsab0o6FkV17VHcroEPj+8969bEwutdn7GuzHy2QclDzfH/4H6jv13Xl
+gdxJYwv/OlnfTb8ePJOKFHhitPffH2DDkj92P90cPqoNjcYP6wHviX1H/xV
Hd8cA99cWT+OLHGYf93QdznGemeu7C+JksfZJxz4JRv4JTN+0Ifad1Gnpov2
J5RKPK/VOL//fQmb5/D/ZOmXGLan+ZZ/mMT4C/7JopfPO/o73LpB4dIOrD//
54bzC6qoRfOp47bOcTP2Dcr9b7+n0K16rbYUNzlHO+32dG0qOUQvH9l4jxvn
h4dXvWyzjOq8O2e7eb6tzrsT41TvU6w7mL7+YLo6/+6Axf/B1MDi/1IaH+P0
ZYxTML1+eGHXw3+Virzh1MsCv8k2fyPavVO0+2Uq8z1X4XuulGq3vp8VXqHO
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
uxhGfk7kQS9Qs/H2BN4msruPLis8Zd50F+chRR5qNwkzGEy9Vz1tu/bTD490
tF3BZPdeHCatI8uNcXDj/sXvrmTP6v329Bbhv/7pzvSp28XuYVyQ+cT1Mp/o
weshgp/Dabnl7zlS+z1zO+yZGyH17QnpT0RQ55SrDWYuwH7WNPros8rGd2ar
86SFP+ol/dEs5jchX7lU1/HuIId8T2p//b3l73yTS8eroqd0XKnOk35pb+nN
qZ5neP9IkMV/53i/UK/NBbbLmWErnbnqnPTb46jc0rfnaJ7lf8VRPykPut49
LvOVgVK/HqYm1l8QWeTp4Mz+hu4fXuJ8xPsyDyLshTOlNBzTceLZyzXqO/UM
KBsx+xTvvypM+63iz/lneL0+8I/ri24GODHcxPKfcN5BIoXZuGfO6HMMl1oO
pQvt/Kjlro9aJtFbrRs5b2oTyOezLJL2vJE9PXC4hN7b2Oy1zy+o86jN+NGE
5y3cEFJyJ5jebtGoYvHrRdK/RfxfQl9/3/eLjY8EUZ+HA7KDB5TQfMemg8MG
X2b9bufyM/fV90ZnSr1mnvcyRMKwj3Ot+brO+cB/pJ8g5MeR/ckHmj/oTdfW
2xNYe3l+PxlkXyjcybDoZ5ekfxCNl/nzSTf3PpPeJ5CekP5qYytxEURWWv7q
DinHAZL/DnH+QvDfXoaFv3KQ8RruOWH8+xs92V7AXwmOPHZv1aYcui/zLQ52
QnW6Ti+02rbp8qAL9MT3DXweHndd0k+dZ+0i/XOs42AdxtKnP6rzrdvK+CTy
6NhLR8fiPKBsXr9IsJvpg+b5b3l0oPQH7xnl6jzqvTJe2SDzgpY6meDIdh/x
iBWezAlm/YE8VG57v5z2fofZ7+o+xtF2HWNY2KeDJLoJpS/s6qHuPprssu7E
i7tDa6xPj5f6DLC5H6DVxI4vZM9S3x+uWtcnf7OPB8NfW/7+BRpr+fvXZDzu
RXW31Tt39GCmjMe9KHx8VsT4rEzKXPEg9k59f9Znpr36MmDh3fIUdb60uX4/
RNoTwW/nJB9iP+l5GmPZn7UUG2P/O0MTJX5NpJ0Wz62U/HVSrmOs5/2dIl5e
zbDFzj+sYBjxJPLowl89J+PTS9Tl6OdfTxh4gvURpS/osczVkWHhb5+Q8WK0
9K+OSf9KnUftLem/bGt+4O4odT614FcXzrMcnnI7u/rYKd7/d0qWW+F8l3iq
svyDU1JPxtN9yxFQ36cW/qgr7Yz7qvvAsniav6rDrbE9nSljUk5Dp2cTWf+K
/GOiHI86f9rcHxPf0r5Q7UrJG+/ZrnTKs+KlMzJPEkPd+8x44laaP/unO75/
Zdf3rwTQmz3tf/n0gjUudb70iwbco3XXyvWPqu9Vm+sriE/KQh799BenAs7/
1LeWRcvZny57ZFShx3fl5Gg5AmGcXyuVz38R3/xO3SWVtFGu70y0z3vsDaqa
NLR9o0FhdPPd48fGFN3gfCLyYPq5Z9nUdNSfv290UOdTIz+J+HPs972fnLlY
nU9t7pdKGfW27YqgT+y3FHU+tbjX/H50ceyvPWdfV+dTIz54wmZF6vctk/o0
gOO9b+V44Z/PMmA93knl+AvrQ/H26R2uzqP+V8Z7iEM7Wvsl3GjwbbtnnUIf
WOsnblR7z/Jhwe1Safr+k7bLTeq7DLLMTbqbzFdkULvPz+UsOXCZ400zvwl5
gn0Q8aIzreg258SiOnEyXlDnUQ8xYHebF7o28hTvz7Yv8+V3PCX8vF1JtMLy
n0/R3b827ninMInzL2vsZibOndeLu75h30BxgV62xuvD+vGY5C/El9gvM9Xm
De59JpzjFawrVEl/PvVa84/OeiTRmxa/q+/bVlj86UHlFn8nkZVGfMaX6X+k
la9jK9+L9Kpb045uTXMp5u361Y2fVOdFL7Xk15euTN1WZ/VTheT+4je9XP72
pUZzS7PzexdS7uON8x5v7EhvfDbPdkVRSxk/dbcE+Qq9beWvnCimUXHd2yuR
d1fnSX9rwPFNPiyq/4/6nq2Ih13Jnu5u41NzPWK53A+D/RzQTyLffk3m291k
vj2DTty9c97vQzd6pWTYybt3rlH1yp9D/CcGUkSLKbZIp1jamxjOtyM+h3xB
P821WcmWzRPpZyufeoYecnPpUZiVwPoU8wd5aSvzC72TGrzpcjSQzsUUzS75
s9iIvytrwL1y2rx2u1YkxXgPju67vIL3HyG/U3XMN/zMGl86crBDwIP8Ahr0
ynMHF//gSxPOLvd8KLVA5i+Pc/zj2vfFHilLPen7B7+t2PZsLsfr8O+/cmrd
aUkndb409tfMC33mesuAfPrcZZftUudJH5Trk9AnM635iqcnPJo1LE1X+58Q
v46Q66E2j+q5yi0ZMr69wuUDH0n8e97ZK5R9v9lDg1wyaKkll+r85zbjto0O
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
   "], {{
     {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
      GraphicsGroupBox[PolygonBox[CompressedData["
1:eJxNl0tv1UUYh+cU2nKxpS3lYlt751K5iNCCmCAgtCb2AhRJIEqBsuG0WEgk
AS0sC5WtXLZS3AsfQD+AQKJRXPkBSFl3Z6Lvwzz/HBa/zJn5z7zX3/vOnK7J
K+MzVSmlvlJKy2JMMf4Rw7PA5cBE4FygP7ApsDkwHTjrt9uBG4FvA1OBr/x2
x7XvAmOBg4FDgXnXZgN3AzcDtzyLnOuB/YH3A9sC5cCXyj2mjMOB446fBr5X
HrI+rk3p5xivVae0O8aeQG/gn0BnYGeguyalrhg/CAzo05bAXsetgX2OfYGZ
wPnAhcAJdR4J7EpZTndgj3qI0YeuofuLwGBgKPBA/7H3z8CLQGPgZOCo++4Z
U+L3Q2DO+X3X5o1R2ZjtiXy1BJbM3Vz4/Xv87Ijf7ebyhfrI7/ZS/o3e6kj8
N7H/ScojMSN2/bGnzbO/Bl4FflE+suHLjlKWtRi/2wIvA+8FXvu7PnA6vq93
T7mU7WgKLNcm7LlUnXWj9/NS3tek/KrAc33hd0P8HlEe9lf5m3X8xj54e7s6
z5+5zvw/ch/f15WyjfjIfnwZjnGqlPXXBzfWBP7VFtYbtbfs74vhQHMpy2R/
XWAh5XP1/q7z9yNzx5zc3jBv0+Z8QN4NOsI76u24XCO2dcazypwQk3WBEJlq
5e+GwMbAu4FVgdVycf1b31b6ba05IGTU8DH1Ubdjzqm3UefntWU80Ow5dG/T
PvLeq03oW5IzcGerNrU4h2tPyVlNrofHxoYYLcjJJ/KtS75g708p738oB8jZ
X+iWz8/lD/s7U67jIh70klZt/XFF5hp9ok+7+Najb/jQrc4385D5d8qcvmAM
TnrmHXPTYryZf5SyXHS21+Qec4A825fQT01flwtfm29iTF+hj9BrjzjCD/rl
ZfeOKO+TlHvKPnV+5rjfGNFj6K9XA5OBi4Er+jBpbpFBX6ZPT6ujHMmdqs78
v+UZZNBrd2vfU/NGTuBWuPSGW9TIcnOGPnrfKTlR6z7q/bE8oF7K6po0rsWZ
IX2ip89ox6GUeyt2zBqPGf0gzvTj4RVZHj6MG8ej+rnL89QkvZV6nLL3kJ8m
7VlQ5qjxXisnuuREj3O40uscHzc5x05qaMz4bPbbUm22DRtnzdG8fsya59va
hX3X7I3UBDm6kyr3LeOcZ+b91qSNnSnzntor6mCLdsBRuFtwtsW9rMFZuEud
bHPOXblTmSuVhU+rPLfRvG4wBi3KQPewPbUj5fpBbr05u6nPda6jv8aYFj2m
2djXKptv8I86OSwnbikL/+8bO3rV+VTpo4wT8gCOFbwYT5X7/IR7WbuQKvf9
Fe09Z54uK2PS7/D1onPuBO4Grhb6J32ee5q+Ou18QhnT6phR7qCykD3qed49
1MGpQs+qzB94RC+k/h4LapKagr+X5HTxToKLDd5LxAi+PPA3HHzovN5775Fn
JlLlTjirTcT6rufw+aoxwie4CE/rvPfu6SdrcHa3Nh1KuQ4Zi7pkpObot9zT
a+I3gez3zuONw1vnN/cM2Jfb3MM9zj2w3TdDY032mdgsul68GXb4bsBG/CWu
vFNOe6egr923BBwe8SxrHb5DtisHXe2rc87JPT2/x75/xnuqw7ysMQedKb9H
WafnYGvxDrrke4y+VDaPD8wf+ZrzLcM7DD3d6upWL7U6pd7C3w5jyNoZfWRv
r/u7PN/p2fJbdcvI+ojxWdSXJm1uLeU7+LlyyCX20Du4i7iT6Il7zD89iDut
+D/R77duOcH5Hvcy71PGPuXCkQOpckdSu8X7ifou3u571XPUfawNue+gnB5N
lbuTb/QoOMV7ZstbMsgHbxfeJAO+IeEneWj2TUwOm8wvcWmUew3ml/XXcvel
HGszbvCWGC6Tq+vlGN9b3dNrfuEXdyx9kX6/ZG28Ukarclp9w1MXp+Uweaen
jOj7/xbWKwA=
        "]]]}, 
     {RGBColor[0.46955016893675827`, 0.4687237015432697, 0.5430439901458035], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmG1snmUVx+/n5e59P/dMBEwAayzdMiUx2WsGZrItCgNDV9RgNK71JbZm
HX7QACvIPgArzEa7uoLbTMBRZzYM3Vu3Au1KF/yAE/GDQkYIakJ0mEzZ2mYr
7OkHAv8f5/9kfDi5r+e6znWuc52X/znXs7Drp3f+pJwkyYFSklT0/X8tSfo1
8Y6+c2mSbNPcFlGPqNfjzaL7/PuQaFJ0wr8fEfWJ7hdtFz3qucdEQ/79uH+z
/mv/vst7kPvVPEkuSJ/pLEnaNK5rfEHjS9Lnt1rfKXrKZx+0jH2i31kW32HT
YfP1+Xz2nqnGPHwjognRuNeRu9f6Dfv3HdKhIpvUszjvhPfs9fnIWCeZa0W/
8pkv2C43aG6V6F6Nl+se5/VdIvqiZF4vg7+o7/OS/S/NLRV1iuca0Tnv/7Po
lOhqzd0ousJn/0n0knU55d8HJGe/aKX4JvQdF81ofl565zrr5jTOQYfrRGdF
/xP9RfSQeFPRlMbvl0L/I6LmUvCctW8a/twqWQ+I5jVubZJv9H1LtMy6I5/z
uRvzu/WteW1lOfj/LWqTbW4XPaPxhWrc8Q2NF0jmZ0Sj4u3ROZvSiIP5UnyJ
g6PV+M34yTzGF7PQnTtwl3P6PavxUC18dLgaMY09HiyH37uKkDUs3q3l2HvE
Mh6yTX6cxtqGPOyHL9/U97jmttvOY5Jzaxq/16cxxhd95cipNvKriHO/LjlP
63ubeO7Mw28b0pA7qPGc9KmZ54B92p4Gz7TkPFcOuchEXsV3uUfrd6fxm7te
LMV9+V7weE8ev2dsmxnRJs13a19XGnwHtX+kHGv7nDPky37rgw651vpFs5J3
qBqykLMrjzG2P+y9R5wTLzum0f9Z0bZy+P2iqFqK75zH3y/iDk9mESf4CF9v
ScMvX9L8QCn2EzO55h62Hbq19+1q6H6jeZDJ3H+tz4jP32gd3/Y8Nl5RCl9M
OT/Q+5LWWzXXIrrJcbyvFnbEnt/TmatLkTOvaP33Wdhnnfj+4fj7p76Dmlus
uQfFv6scY847XQu8eF3fLWBGNXjfMSavqER8E+c/1N6/a36ZeF7V9z+1sNGZ
Wth82PjGnc7YDsTEiLHuhLELbOyWv45p7aUicGTC65VK2Jk8qFXCttj4BWMc
tgJTcq9NWh5rn8rjXtwPe2G3v2q+cE6T/xOOa/Dw2+Lfo9+/KYfNcvMTb8vN
06y9V+i8Rfp9bVNg4mkw1nlLjoKfy5ybp2SLHZr/Zh72A6vIl45SYNFp33XE
tjhv/AK70AXMusb+6/cd+nXGz9PQr8V8k7Lba0mcxZnTxuIXNZ+JxsEf/R6w
LcDwr+WRt+ABOIg91og+3RT3e8NxWzU/MdnuuMQHE8Z/9KYOUafAReobOUKt
HPrYGmNq2uPG8O3J5XpJ/STnqe3gw0LpcF1T4PbP0tBvjfGf2n+X46sh7zHX
BOTSM9AHNOptn9ew+UbjP7bAJotc0672fXfYRtwZ7FxvLD3rHDyJHOvQY7m9
yeW6xJcegjrMudii0/putm/xMbEBzoAJ4MeYzliLjZO4d0tT3PdlY1YDA6as
A/g16TX8RSwST8hot5x2n91hG44Zq0c1PipaWg0+1sGf6TSwk/Ep59+kY5Ka
vcS59ZRt32sbbLaMxplgRL9rA30HPPj1JHWsHLnX2IN+4DtncjZ1eK/zAVwD
31rywMgNH9Ozw2efKCImifd7i7DpgP06bp++q/X33Eciv57GGXzn3c+Bi/Dg
tyHH7k7zXDI/cfWu5aBX4Z6D9brlgH/I5BzwjB4CnKae7nBcDXhMvoIH2Iqe
9wd55OzTxgt42EccEA9rbUN6EmTj92bnKnVhwDIbZ5CzYFWzYwNdCutDfRu0
PjVjGVhEbmw0/izJopd8Io87tbn2YSN6Ida4/6j7K3rJg67X1DXG30lib902
udtf/Ms9Fvgu5Npt7lWQ3WP5+PYOY05hfs5DX+6Pf5s9rjmPr/U89+gwxp4u
AjfPFcHXYRwAX8HPFudmp+fBTXyBT8Bf+JinHnYa26mxq92b1uW/bq39qBrx
Snz80rVkjzGcOkbfQI9L30pOko/wgW/tWeQo82ucX8QcuQP/VuPgvH+z929F
zH/UA7sXomaR2+Q4edOw+zPOOfKHPCI3Z9LII/oG+ofZLM5/wGexPmtcoMdC
Pj0FPQLzyEDejHnocem7zountxr35+6sT/ss+gb6hznx3OoYI9aoZ9Q19Cd3
B5y/ra4Fa4yN1AbeKcTFLvctxPlu+3Gx+Zc6Plu9d8CY8MlaYDp98y+K4G11
rVm8IPyIP5lfbCzmDbHQPFelUT8WWV/i6oMkehvsTGzzvcc2pwcZdMyccxxy
V/wDFoOT9KJHPSa/wBnqx5ezyKFFWczNeZ6ea9QYDm6t85uCPmWFzwIvxowf
4O5JvxG67DfiinvxRgLbx43P8Cz0nZc6v6ec4+TsSWN43bkKTlInJ7x3yjLf
sswJy6d2EfvUr2d9Z2J4m/tw8P2WNOoHdvhjHnf/nO6+O4/36xc0vj6LMXNj
3ttmG8HPvpvNAy92fc59NjFL7G5yTXveuoEt5CzYOF+Nfot8+oN7JHol+s+v
pNFn1quBueDtlWnEX4vxhDEYA5btt3xssN74Rh/FPDWLnqfLOc6X9w96E6PE
aub+nFj/Vh5+6zLP8SL0OVaEvuj9CfHcX4R+r7kWY9Nv5NEno/toEfFLHH8+
v/xWxHfsm/cbgxi7xTHJna5ML9eaunmoM/ympxwqgqfFNrnK/MghTvHNe66h
xHitHDall9zkuZ2OjTHHA746ZH/Rb8LL26GoxF5kfLcInifk65486k5XHtgD
BlWKwG3eM2BRuYjxoOsUuhEbq7LI1+E81nvN36hnG43VK43X9NxgO+8GZHEG
edfpMXtvt0xkoyv60zPz/uO9wPuFmgF+dGZxNvyrs3gLHXNMknPHnF+zxttV
lsEbiffRK/4/h/91wAbs3md8BIPQDbwD9z7r99Zxy/zoXVUJ21LvweTlWdhm
xHWctyJyeFdRq+lTiGf07/YdPgSjnpds
         "]], PolygonBox[CompressedData["
1:eJwlkj0sQ2EUhk/dNvf2srAjEj9JF5YODOInJaoNaSKREEM7dCNRIumAzSYG
MejARoPQmkxGIREktTD5mwRNW0k78Xw5w5t73vO+33d+vtsWX4jN14lIAHiB
3xGpEJRByhV584uEibNoY7bIFbmET6TkERnFewj8logLssQW+jL+JVBH/Mz5
fuJNzoc4H8dzRMEu/DfEHeSmRXNJeAT+Ak9T447z1yBJXKVeGL3X1l4Wyd2i
FeFltBNqzLmaM5rFfVH8zSBPnAMJ4l38x3iDoEBvVVu9q+AAfRykiT/Qf9Eu
He31hxqf8AZ4Da0KVqg14ehZB08NvRPeRP1GsIX+Ra7o0Zqz8JKts9RABu8e
/NSrO36ln4qtmsnF8T+Q6/bqjgbQemzdpdmJ2U3G1tnNjp/wzsD/0DfQC67O
YGZ5Bwl4AJ4SfUPzln3wNfq36H/f0RnNrKbnbUdzRjM7CaI9+nV35o4heAx9
hLtC4Jz7vm39N8yb7KBNgShaBFygn4F17hqE54kn0Yd9OuM9d+dc1cw/Zf6t
1nqRFpBAb+f7D1ZZXoY=
         "]]}]}, 
     {RGBColor[0.7042502815612638, 0.5512061692387829, 0.4050733169096724], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
PFfP/LdSNQ8+h93Zt945vc00/P4PEQNKhQ==
         "]], PolygonBox[CompressedData["

1:eJwtlWdsTWEYx09Pz3XOvSKV8NFWae2KPRKNVXu3RBQtMRIztsQesWmC0Ira
FQkJH3xAolZTm8RKa/tgtGZRWsXv77kf/rn/5/0/4z3v+z7PbZg5a/hM13Gc
OcADCT6chQ4YPeAZEcd5Cc9BK8P+C+LQS1ibhnYFpIccpw1rEwPHaYY+F14B
dmKXoB9HD2IcZxj2xjBr8NexjrMZ/h79GPoZ8g9Gz8KujZ1FfE30fOzR2GPA
BPRWIJ7Y3+i74Q/CttcV5LwfthzK5eOTBx8IHHxD2IfhhwLjLmvl7LUDdlNy
J4Jcaj0A6+EN0EvR7pEzifyrse/C9wRW+zv1vhC/CgyKsRz7if3pW+2l+AzC
NwEku9FvQi8AGfDpxGTh+wR7Z8hyKNd47FXwZtScAN8StrMqZe0t+lfdAfkW
gP7kfofP0ZDVUK232EdCtvYYu5j47uRaSXwRvDR6H43wvw+/FbZa2RxTa3IX
sbYVvQv+87DrkaOS+hXgAL53QAv8R+HfHT0b/Q+55oGW2GXo6ehl6COxR6DX
x64HCtAuYP/CNw10hNdSPFoVWEbtQuwkas1G76P7Yy0fbRv7eYmd49u3PGNt
HFo7MM6zPd0mv4+9BD6VHHHaK/7L2csJ8k0l/kTEcoersVidWNbOxdgd6C6+
4f/Kszevt98OezH+A7D7wUOsLfJsT1exP4Bi+BvqbafepIi9rYfkq4Jn+/Y2
5TMWuw4oxq5C/wvv7NtbcYnPZS+j9Y2u3YHuopKcU4hdh94C3oA91wfxoEl1
q6naRfiU+nbmOnudyTe0T6qPXUnOXeTuSs64GLujbvBqYLFn36Rv++ibr3o4
JbAeVi9rJmg2lJBzOL7DwHt4I9byXeuRZPgQ/D3Xelq9fQ4MDVkN1WoS3ftP
Yq+wnob/EH4Hg7PSyXGJ+ES+KV/vg7U9ruU4H7EZpFmkHsjR2yHPDM++aTLa
Z9/exlOQjn8F+mTPzlBnOT+w3lWP7cX3pt5DyGaEZoV6QL1wEv/2aAex17CX
VPAZvW5gsy4gZoNmIzlT8M0jpi++r8P2VtaQ/1XY9qC96A50F+ph9XIN4jdF
7M50d+qJHYF98/9vd+1sM7HbxtqZTIHfJmYhsRfJ1w29cWC5dAZV1HsEOnn2
5nuiH/bt7awFzdH2+fZt2vML7PGgV6z1QKHmD/nSyJcKLlArAeTguxckwn/g
nwHPBOXweN9mgWaaZluSb7NJM0GzQTNbs1s9fQ1+MWKzRTP9EryTb2enO9Bd
PMOnZ6zt6XlgM0KzQmdwPbAeUa+oJ9WbuX70rLWnSLTHpeFzE34jMK7/DP13
aEZpVmkm9oY7gf2X6cwe8j2nyHGZ5WT2cxr+D8Pg9ME=
         "]]}]}, 
     {RGBColor[0.9062221076974072, 0.635555269243518, 0.30928853386196237`], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmHmQVdURxt997925i2JhhUVNWAYZVJakBBdkTGnKBRKJUWNFR1NCEiGi
MlES1CqIJC6AspTGEPdxxsGFWDG4EbJZgoIiApZRJBbrgJExYpXBCgkRzfez
P8o/7jvnndunT59zur/++jb+8CcXtFYrlcqp+qmp/VlWqTyg/jtlpXK2Bs7S
s1XjC+qVyrc0Pl/9VWm8Y3ym+jP0jNX/AXmlcqj6J0puVxpzj0sqldula5TG
DtHYndIzS2Pn6Rmv94vU3qh539O6+6Xvu0Wlsk3/52t8q9oVtuFc/X9R81fq
OY95tWjP13jaUKn001PXc7HWmZ7EeKfWHSb5DrVtGh8u+UlqW9VeqPYaybDp
mervV/8srd2m/2eo3YtN6j+lp0XvL9FzucRfV3upnmbJJ2qTWsy9oRq66PP+
Kw0hc7h0Xanxn9djjHctXhsbhmvaniTsxubLknjPWr0192rNfV7Pbu2jp9qv
6/2nOqsekvmx9vWE7LxDY0s01paHPQ/msVY/27A7j7PljM9Wf4LGXlHbUzqm
6fmB/m/XWjerbZPMCL07UuvdJf3tGh8imd4aO0T9ZyXzkmR+o/50jY/TeGMa
/Xu1xi1q75cNZ2vuk+o/WI0zpz/Za6VJ+AN+cWcW97W6DNknLTPZfebOrse6
o/W0aq2pekZzJppzmtr1WrdRdpxcDZ/6QP0L1b6l91vU76/xndZ1jp7Tpeeh
Ms7/JL1/Tc8q9a9Q252EPdjVVItx5uBbnCl385iekbW4q606hzNl3za1myqx
r7G+c2w7WjK9NfYdx87uWtiOn7whuZGa+ze1J2jtQdrXfbLry3p/jOSb9Ewp
494/kz3/kOytmvdsJe4N+7DtKLVX6d1o9VdKvkV6Vqi9TnM2690+9SdK/+N6
/4L6nxQhP0nvZ6m/UTK/KGIN1horuY1F+EdF82ZKdkY99nJKPdbm3VTJvyr5
tbW4/z72gQatsUyyf1a7XTJd6l9URmyhZ3kS66ADf95QDZuxb4fkd2psjtbf
XI2z49w44zP0PKr+QPycfhFxxzi+Cx7sceyP19jjSfgG+AROdan/kfQfwM48
7O1tmw9I1ynqH63xE2XrPs39Gvurhu+BdY/oXYPWeFTtw5L/RP0pxrN3jGnb
0aXxxXo/Rv1P1X9X+rZq/S3V0NuoOc8kEfuTi8Cjvmr/p+dRje8/uPda2DdP
cx+uhr9yN836XzmkUsmIU/2/tgzb8Rt8Zoh9gv6zefhMRxb3tFr9w4rYG7as
U/9U9TPJrpeer+aB82vzkH3GcddQDT0vaOnxeWDma5I/DL+tRtyDbccZLznb
Xra/7rghXg5oznva/+Vl2Djafv7HIuLi9TzswJ7ZSZzvQnKT3q9OI/eABxNk
cwvnrKddYw+lEeepfQ8fXKexHUlgKTFL/1iND9T4gDTObrf07JKOBdKfJIH5
/wIHNP6h/i/U+JvOXcT2Pv2/T+P/VjutDL8EA8h55L5D9W5kFn76J40Pqsd9
v6L+/Unst67+MmK2FnnuHufQu9XvTgPrx5ArpX8KWJAHlkwxnlztuYPtd0lD
+N4/y7iHQcbdacYucOPtNO5usPovJ5EDyElXWifnjQxnTr4lf5/rOCQeu7J4
v8kyxHGb55KfrrY9J8mGpWCR2r6SbZBtfdiTcysYOTQN/XCDvzo3X5LHnRAn
+CW+89Na4GYP8pd07q3FXqsNEePkGHLNsixiifgA1/s6psixrPOu9zI/jVhq
9flNtc34+DWOx2GWx0Zil7vmTok34u530l86p9ytddbreUK2naDxY6th2zvO
IYntXKdnYhJYRx56TnpfziI/p87RyE43htyTBabszOPskFmTRNxw/tzn+Xnc
NXdeawg+xFr9nKeIOfwIfwIz2O9z9jc4FnzgIq2zSc8q6Tu3DB3oYh+sy5r4
ynL1/5AGzhITsxxT4NMWYyg8idghhj4yd7q0iDvlPsFneOUac5ymevgi5/KZ
1v4V/IhW9ixRv6WM8+52LOzwPNZFB/vjP765NgnOAHaCCZ2coXEMPHvKdn1f
uv+bhwz4cWctcsK3s9jHtnrYCqag63rJjqhHTrlRz6IicC3NI67gBqwxRPOv
hV/J5puz8LWHy/AvcHuw89BctcOk47dZcDa4G3eCT3Av7zou8D3Oaq/P6xyv
A29pL0PnTc5jm50fuYMtzmXtmXmC9Hdmse7sPPAa3B7tO2+zTrgI4/AKeM0D
xmpiCx/D16YZUzjnR6yT/LrGvAJ+MUL6O6R3eBkcDX/5PD879sEA6gr0X5wH
tpNDwXf8DD3gEnf9mG2Y5HU5g2scq2URtk86eCZp6IBX9iwCJ8HOC7PA1L1F
cFbyOPkcLkuO5P57mNPCbYmzBscjOLQtjfMkpmuO5Z7m4sTUQMvg42uL8OlX
i8Ap8KpB8k+WwY2+mcfZtNcD08YY58EE7m2r18I/ONvFWfCIRcafxc655N7Z
xgJyKbwZ3Bgs+f5FYOYM5poDYwO5ixy2QOMDysjTp+j9wnrUdT9Kws82+B7I
4dQ75Owl9tX77UNzff+9jM34HXwO/Zt8VokxcGUtzhvuRO012Xd2RBp1FOe8
uIz+1Dw4yq3mGleYkw/P4qwmOmf1tA9ybtSc5E1iE//CDmyYWEYsT1A7WfNb
1f9UZ/OhuS6cd7lzWF4Gpr5tXCUW+zse6+aIxD3cqpIGL4ezP63+8cZj7oI7
gZOSM7ivTvNDeCJ2rkgDc3tpvbn14AXMY03ibk49+A3cZpPzPfUNWEAOGuM6
cYX3e20R3LsumXllcBi4DDi93NymJY84IccSi7wDh+HicPJtWfCX5Y5Vasfd
rk16OUao//abl4KrH2vuS5L/qAy+TT1+0K6V3iN7gKdx7xuzwOfrinj/omWo
SahNZhfhv93Offg7fg+PZt+cJ3sfbhvgyHAy8tD7WXyHYC0432Zj42V5jK32
OL45yv5JnuEbBGvdVY//9Nen0f97EryF/EeNvSOPNcaXEU97HVPEDfFzuvMh
OslNDc7pfcxv4FLb86hLqU/ZH76DD6EfnPjYOrtqEWvsHdya4Zrll+YWe7Tv
j4t4B7bBNw/Y38A//I19wtvxDbBygHM3/tBsX+wyr3jKe8SHkJ/qWF900IYi
YoEaGg7TZR7DvKc9lxjgP7jRy98r+G7RbmwhN93hvf2nEnmLO+Ku8IcV9p8L
ivCn97XWOMmM09wdRZwf34Dwpfc0p5M4LQMniB047c4y+D/4j730iV/w7k3j
ExhADFMn7XKLPeheaf3UIaM9Dm4xvi4Lfe3Wz9lwj5z5I0X0G12Pdpozdlge
W/AL6hB8A/zbaa7yQBa5e3oe93yP4/p6823q4Be9d/gEePyh+c9pWfCSDUXU
GNQaJ2exZodzIXgKrrZSn/nbCPaOSONbE2e+IQ3b8PmhjinqnjOyqPPf1tgb
Otub7Mv9yogZYhXOiw3YjI4N5mhwtybzOh44Hrh9vPkePIn6gPr8NHNEuCLf
2/aXoQd7Dndd2UO8u6WI2NuTR/zR5xvPxcYQvnM0GlOpVamX4ADdZdwnuYs7
5Qy4J+6Oeg18oZ573nVAaxYYABZwb9QJ1AvUFXCdueZx7ON411ELjS34xkiP
s8dR/gZ0uOvFE+0z4PlNxvTbi4gLYu0vZeSAL5Whv8l6WJ+6ZbDPeb3Phwdb
PzPmzUu/qGUafQ7UnPSpazZK7rY0eHC3sQ/cI5+BJ13GLrCv2Xc3xvxkj7kE
nALO02iu8vsy+qPyiGOwBX/Yl0VO68yDHw20PP4ywvG+wFwI7gE3eLAe8UF9
jh8do/a4MsbnSN/QMmTnZlEXgbn3ZvGf8SV631/PryV/Sxbrbk2/wL8Bzn3D
zK/JKUuzqHk+KOJOhtrPOYMjfA7Nrj/w4Q5/T2YuGMp+u/Pg7YwTp3wfIo/y
bXiQ9w72cs7L6nHW8KZ2YyM4lph7n1yGzxz0naWOkVPLmNtcxv2vs38eWUYO
GlbG/jmH27LI5fBvcIH4IY74TsM65PbP7yaJvNNWhG8Tj7v8DYa5Nzhu7nDs
MNZqndiEPLGwKoscy3cX6qYW105wCrgFex/r7yF8F+mTRy4jp823/xMHDbbn
oSK4dtV1KPbcYLvhtiekcX7Pl1HDUL9elEfdQs3QZQzCf+F0fNcgR6zIg9c2
lqGjwzz8G67dqOHghqwJd23ynREX8D7O/xjfW4f9lvphiGXIJ03OHXxnI5+S
h4d4HBn4CDHOeY1zbYRP8h2G7yhnau/P5fFdbFYZ9R+cfI1zbh/n2YHm8HB5
vr9TX1Bn8M2+r/MyWDjXOMC+iYtLzJ3hY8T1eueYq1z71P2d4WlzA7AMfOVM
yf/UoAvMedZ6DD1H2Q/xR2op+B/5FNsfd00BHs/0PjmD2bYNec7pc7zK4rvY
BNmzNI8ao9V8eY7l4ZGs/VYW3waaXYtdUQb+8k2dOpw7PVYy/wfeBF/k
         "]], 
        PolygonBox[CompressedData["
1:eJwtlntMlXUYx9/3PYfei9EoidKKAIVE4R8lwdFmLhVr1ppzE6pl60IpdRqW
WerUZSVOooYpaIiXQ6zLWrSUrXVZapRJiquJ1UwuWmory8mwnLI+3z3nj+/O
c/n+nvd3eS4n99Fn5yU8x3GaQRw0BY5Tz+89GJuRu0BRzHFa0auQz4IK9Etw
ziDvjbCnOU4P/qW+4zRgu4DcAp5HP4Z/Pf75rKkKiYX/RvQbQCO+r8C7nsXY
h7wK/ybXcd4E77P+RdYcQu4GveivgLfYaCHx9sItA5WsL2Z9Lr4E+hHPvqFv
lRGzA/5i+KXI94Eu9DuJ9xL8FeA5fJmgA/4UfZP1c+DMQS6H36mLId4a5NVg
LNwCOJnwf2R/k/HXQpkBPw1blu4CbMY3jO0MfFd3iO8NbA94doZsYi3D1s5e
6kASbgm2D/CtQm9Cj+B/gnyQ9bW6C2z7dHawGL0W/hjizWTNEuS/sE1A78V/
DrkvNF87+6tgbQvfc2J2Rp11G/gV+XpsH+N7khjpnp3pKeQToJmzN7GHodDe
WG+tN9ZbV2CbgnyZ9Unk9fgfg7uT9cWs7QYJ1pfh/xR/KxhS/uBPD+wN9BYN
6GPhHgEr0yzHyuF+i38Pcg24Dv0YmAY3Q2fUt4mRCz8HbGHtC+guvleJuYO1
kyKLrT1NRF4BloM8ONcGtkZr80AJ+i7lCNxJ6Enk7an9JrEN41+IrS9ud6a7
GwgtV9bi70e+BnyDvBukI/8Mv55YCWJUo6/TncetplRbE3zLnXxs3fhPwd8J
P5v4Ef5EZLmpnIqjf4hejn8h8Wej17Gm2rOYhfi2BZZrV4F3kEfwJ/BNg3MF
+U+wKWY5koX/FPrcuNXIVNYXsp8lnt3xXb7lvHL/JtZ0wu8OrDd0ge8DqznV
XjH86ch3B5b7epOP9J6Bvb1qQLUwGts6uHUgE3kq/vnwd4Ed6DPQS9KsJrPZ
mxPYW2egL8Jfg21/zN5orW81oFqQ7TB6P/xZyLPBAHKpb7mvHFQuFvm293z8
X+B/XXeO/C+cDcpvbMd1V+A83JnYxvGtVjizkH8nRpJYLvvPgXvUt950EizD
fy/6oGM5rFxOoI93LQeUC/+A/cj3E28e/FD5TqxF6BnqDYH1WvWoL/Edjax3
qof2In+mfuTaHX6O/Dg4jbybb17kW23EuAL/avi3EutgaLn1HmjEnxtZ73yQ
b+REVvOqfZ25BX9lYL17MrYFyKNDq71OcMC3GlAtVKH/p/oJ7K7qU7PjDzjn
XOtx6nUPobuu7V+z4An0mrj10D3wh+Fsxf8y/h/wrwmtd/2CrTC0GaFZMUY5
Bj+OrcyzGJeRA9V03O5Qd9ke2tuUwsmDPy6w3Ncbb8C/wLfZpTfQW2xBX+3a
nieyNncU9wLyQcEo24P2Ik4z3AOB1Z5m1neSQ7ubemx96OPhLHVtJmk2vYb/
eMxmmGZZGf6VnvVg9eI+5YtrnEr2kwXnmVS/090/HFhtyCZfm2+zQjOjKLQc
Vi6rZlW7ymHl8qD2hHwbMQfg9nDeS8gbI7tL9fgR+BdC6+2acXfgOw++xu9x
9hhoD6yXqKeqtxak7kacoch6gnqDekw18bZG1ks1k3zlQ2C5rp7T4VsP19me
1sxVLw8sFzWz2yKbeZp9mjmaPa2+9daL4Hb038BIzGrwNPLNoJFvbwS3IA/6
VovqieqNOoPOsjzV+zvxv63ZyHf/BjE4DZ71XPXeZGC1pDdqQz4U2rfV8x/R
f53Iaklv1k+suZH1GtVkF3pRZLNPPUy97GxktT0d/ITeE1qv1Iw/jHwisNzZ
Dv8k3P8Beis6xw==
         "]], PolygonBox[{{2287, 2286, 2290, 854, 2289}}]}]}, 
     {RGBColor[0.943714138468095, 0.7292853461702375, 0.4255138292510945], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmXm0llUVxr/vfu/HO4CUBIJAqDiB09JMCARkMCRD6IIMDoALL+JQkIqA
KWDiSjGXTE44IKDigAkCZQypiROoeIEUWYlaAhqp4B9hAUHPz2ez+uPcs7/z
7rPPOfvs4dnnHjNy7IAxNaVS6ef6U1G/Ii+VmiSl0ltFqXSaBhZr/Cq1S9W2
qI0vl0ovqh+k1ln8Haql0kDRBzQ+OyuV+qi/JS2V5tV47mj9HqZ+uNpk8R+V
m24r+Vsr/sZ4S/UTgv9Yrd8q+f/ayBoY3+cFz0Vaa6T619R/t2GpdJvGm6qv
U3+T2jLJ3Kc1Nmh/+9U/q9ZR9DPqW0t2UjHf4pDJOgsyj8/P/A36oNbopH67
fveRzIfKpp/WGRerPazfP9OZXlS/W+Mr1d+ZmZ6m/inx3K2xK8XTV3J2aHy3
5Byt3yNEdxHPE5n3+4j6ruL5WOMv6ffjoj/hXjS/jfa9Q7+nxzz01kPjmyX/
bfX36Hui872b+PdTan8TzxP63qDGMueL/lXm8RvV95S8T0W/q7VeFv9jotup
n5L6HrnP63Pf+7jM50YXhfpb1HdQqxPfKK1bV/Vv1uEMrdRPlJxz9L259tY1
tf7aqB+sPd4qnj5qtdHv07fuFe+J/Xyu+fdp7iz2o7Gz1BqLvkpzh7MH0b0k
d4V+X6Lfj2qfQ9Q3KPs3/UitNSy1/s7X924V7w3dttR5GmjPdxRe64KK10N2
95CPbtjPVvGen3pffSXnemyOO9XY79W/J75fht2jt0WSuUzz1tX47tFFXdjk
yDz4JWMbMmqsQ9po0b3U/zTWqhPvyaJ/K/pW0e0l9yPJvUN0VeduL/7mme9t
UNwd9tXo0B1xZ5rbXzKOz72H4yTjLJ17QeK1G6utCb/uWWPf7hz3xH2Nza37
EaF/dMWdPCvZv1N/WcU+sEHtn6JHqd+TOh7UZ7ZX7HanxrZXTA/Qt1VV/4be
lXhur5DxRcjZkpgH27gv93hVMhdUvVf2eVA8e2JvBwlgif2LeZXEc5/S3ET0
cZnHkhhHh5XQ4xH6NlD0F+I9WnQHje0o7LPIPEZjNYnX6BA2/mXY+Tjx7RLd
UDyzRPfW2CmiT5KsqRqfo7MfE36L3z+tsUXabz/Ro0VfodaibD+YGuct9G1U
xXbVSuetV79ebU5umyKuDNBaa7WnCwvLmxJ6QN6ukIk9fxU2vRs+9UNS3x30
I8Szsv0ZG7xC7W3JHCTeT8S3UfRFor/R3jfFPfeqsR7QM+vuCd+h/yZoYju2
OjLi/9agsWPs+TTJrlO7WvKn6duNoqeL7qe1NiXmJy+8rvEVmrcvsz/hV6+m
jlcvVayLmdLPRtG9RU+Q/HrR7yFP4xuIJ9HqQ+b6mH+1eE9M/I3xGVpjh8a3
ESdzy7wxtw/gC0dp/K3Q6y9S63lZ7GGz9r1E9KUaPzLiILaBr6KHv3OOivPE
arXDtdY+rX2T5n0g2f1Efy7eKVXb4b/Fu1ptZcU5ZWbotpnm7a36+7aS88zq
4CFerYz4yTp/qnitVrn95TCt1V9jz1Z8/yfp91ytdTK5I7ePk9+O1u/7sHn1
WwrLGRP7R95l5Ls4SzNsOPddEH/Ga16e2HabZvbPKaybO8YOlJxZufPIBn1v
p+/PJL6HMwvTP1B/F7rFHtSfK/5H1U9KrNcGkR8H6fcLarP1bWlifmJTt8Lj
XdV3UJvGnUrGW4ltGxs/UlhhgfoXtJ/OGluTOB5foN8zKtY3vMzBrgZKziTy
VeHvS2Ot3vq9KjH+4Dv+eAP+l1n+H1LnuOWJ/fud2AMy8fUtEYs2xjfG69Vv
UOtWdj6vD3pC/B5YNpYBe4FPiN/rNf6h6DcDA8Dfper9E0ubS/7XiXFWkTku
bNPev0NsTpwHrixMj1Y/PXU8IVaxBvGc/HVFbnvALg6L+NVY/XWF5V9bGDsd
DP65oVtiF/79atD9E9s8tk/OaZo4hy2WrEL0Eu5L7QTR7VLjNDAh2A9/xV7A
FtgZ9kYeBksRY8eGXcGDX4M32wVdlk4uDP9iDnOf0zrnRp4l3y4Xz9kaP5x8
mBv7ni2ZU3W2oRrfpbG2kQ8W5ubFhpjfrGqZxIg1Mc55X8m9/16a1zIxBkVP
L+f+/efc+PZ7ibEuDRx+IPIaMZe881nh/Ldd/f7wWXwXvA5/R/wrc7xerH55
ajvE3lfn1vMq9T00fqboTbkxQ8PIm2D+YwN7Y0/oH7trGhi7SUPnhPoYRy/o
54/kO7XD8EPJXKrWiNwaY8gvYp1GsdbX4SP4ytDCNv+x9nVP6ny0Gb1kxgi3
aexY8Zyk8VfinqHJLWfodxvp5AF9b5MbR/XIrLO2ka9fi3rhdsnpmRnvD1Pf
uDDPqsy6bxL6x29qa+yPd5Kjwt7wF3ylS9kxEV8gFo4KeyJfj9X45MTxcqHk
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
MSLkUL9Rx92S+12YcxE7/wcWzcXB
         "]], PolygonBox[CompressedData["
1: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
         "]], 
        PolygonBox[{{2820, 2819, 2683, 1275, 2680}, {2394, 418, 2289, 2395, 
         2396}, {2684, 1275, 2065, 2829, 2830}}]}]}, 
     {RGBColor[0.9812061692387828, 0.823015423096957, 0.5417391246402266], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
wYEZ2SH1Q101tfifZ+eiLdO+mJ+wTuD4UujvFS97nOSU6zMnK7f8jblbb/RP
B88X1IeX/3PtMi/cZe7BXIJ7OW37KSD20aYY+6L29iLktAy6n1WgN1kMGueV
J1N+SVp3yHOS72UvefWd6sIDpv+ZXvg+C+2jTvbC3Jn4RT2PRjs3in+Ckw2f
Mhu7O2ivy9D/oZOP0Feo+3PmI6MsJykJwpivM9IN/Zf1L2uQhl52wPqJd0Pb
pr3vM5mMx3WCapI/of2FYRfrgM5R9jPcqwajf71sGEx8pp0QbxYaxlbD/jaw
niVu58q3SpxyCMZlxueOhnfEumb4P502EPSfGHgt5j4RlesPxro+V7nY+055
IPGOWMe7KrUzjoiih9BmveLpUC8cetNiVs1EWETdMI7VMIw6ZrhIOazbyEee
XIs7Y6PGBxoP63xi9qvEOi89f4K+al6xNz9aTWGxY4OXLa+Jiiu0E9oLYyEx
6N6gPdJeuJ/hUftIvHJ35jxHnHLVmnb2hlbTfoB2bVQ+/x7a1UG67Qn+O62G
Yi31eRS2bHW6qwqLd6fNlrmncsPf6fFqrjAD8gYksnvyzQuKK/PRTnWquy+A
vze+vcw5WXvivvqh/xL2n7E6mWdq4ZVzr2f96IR3X1heXGHxhfNoPx3Rn/a6
oyLQf3OqSaYF5SeMs8w3elrt2Qo8HznFg+HgOQh6N+hRoFd4vQet9KpVexr2
fuNUJ78LnveCasB1aC86vYsMhszXonK1N9A+64Tv14OuZXk530JcUEzxQfFk
tuW6xGJi5XqvnJgxYw7mTvDCE+JKlVeM2Bn0rkE/JS638npvWgT+8zmyw/aG
l4w7xMTtXni6A227qJyzXVA9zHzxqPlrE8OTMxa/iIHDnOqxNOY1NT/5M+sF
p7yI9/C40xsI30JKvOz5pOmF+rmE8Q5e/l+KdpPFWcbbGw1P8oLiLnHmySBZ
xCDGiefMFpkftXV6pzsIOX2j8oxyfHleOTnrFeIjcTKf8dbeJfqynnZ6Q/kk
SHdtLDZNDcrJmZsTPxhPL3rVyqyZu6D/U/xvj/7PmGcF5ep8ExpruQdzDOqU
ur3MOiAqP2sadfd5FgO6Osk54vVOMwN0iyA/pD8S8yqtbvk75j7p5FfVwDM6
qNZ9Bu1LXnUA366OR9nTJbSpqBi2Df39LMYzZyc+Eie7g27tlBuUo++EV/5d
ifY5rzjCeEKcYP5GTGnnhWmMe7cE1cC3ov3ACSuIGQ8Gvb8sSVTfss5tbHl0
R8Nw5jS9zK8edKqpvgzCI663Hm09e9crBt3cMP+uoDdO5oOs/esHvb02oA07
+ThzauYC3DMxlFjLt0Xi8OyoeMq4yrh3yHCNtVEDq0FoO/Mth+zH/Bxz/+E0
3tB4nonKkU8E2RzXYz1Kn6PvcYznZn7LOmFWlD/xLfkhfO9gbItTXU0f5dvM
C+DJQP7zUfhE3GEs5PiWHNkfbYS2wre9YVbbVdlZaf/MddoH1Zj3B91JoWHL
MMg9A56hUfVWc8NEvmXTv+8Df3OvOMc6jzhN2/t/3jTMcqeJQe1RJ2zgWpxP
3KV8xptuUXvuGqXb41a3XjbMaWt+TZ/m+8qCKN3+2Cue3JhVrrfG5pVZHXHY
zvh6VNxk/Cy3s/MOfhc1t5A2EHQ+2gX9h2c54WSb1D/zP9ZGrCuYk05zshfG
Xr4BEAeYV9KOOYd5S3V7v/ruXdXGOWdSUL1T5XQnu+1eekXtfTzxzSsP49vA
AadciDXrEpPNt42e4FvKnCMoFhXbPomp/Q0HiclJVrrf6KRDvoHttXW53kGz
iU6WG3Ov4y12U36J3etJi+nEJNoecf8u87XFkD0taq0CtP8DlYlGZA==
         "]], 
        PolygonBox[CompressedData["
1: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
         "]], 
        PolygonBox[{{2350, 2349, 1958, 904, 2352}, {1976, 1975, 2394, 946, 
         2397}, {1889, 1888, 2179, 749, 2181}, {2625, 2624, 2627, 1210, 
         2822}}]}]}, 
     {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
         "]], 
        PolygonBox[CompressedData["
1:eJwtl3nQ1lMUx3/v8z7v+S2hFFmqGSbbCC0mxISaKb2FSPasKVNJGwYtlqS0
2LemYiwJ2akM0l6UkX142xQV2UupZPl85/v8ceb5nnvPPff+7j3ne85z6NWD
elxfSpJkE1JGGqRJMgTwZFWS1Ad/WiTJ7TVJ8hR60yxJAmlcnSRHMDaNuRXY
XBNJ8hgykrm3GevK3D04fQv8BOOHYN8evR34VqQ5+inoI8A7kfHYN8L/ieB3
8HEo87ciY/DdGlmGbUfO1Bm8PXyezZz1aPAG7YE+gvWbmK+qlyRtGH8fuTxn
rvBZe+BjCvgSbF7B96vI+cxfhszF9jLkbeZuCe+v848P28j2Y/SLmX8v8/l7
I/3QO+BzFXbvIRdiOxj5CNslnOcz5lsyP52zv8DYceA1jH3B2s+R4djuZGw5
51uBjET/Cj+jsW/B+tP1Hex3NmvPRFqCvy58X3qfw9F/RZ+L/j5yEuu7IdPx
fRFyOXudgHwDrkPuYm4Ta7bg61hkI3gOYw3Yr5PeCzwVu+90r0hT7vKF3G+X
YjMTvJs108N3rLtemfnutcfo3HtoL72Z3u4fZO9q7zGbufWcdwpnvYE1C5ib
wPrJ+LoP6Q9ew/yjzA9n/lT0amymondC74zNHmQy+nj088CjmP+MvXojp2H/
EHtsqfae2nszsr7adz6CuY3IWZxlB3Ije72EnoFvQwZrL/St2O6PPhe8Jnfs
HYj/1eA+rPmh8j5/Y787fN4L0GvB1zH/S9nnLXGeMcjjjLdGrsJ+EvP71Dj+
c/y9ztij7DcJOVFnY34h64eyvg9r70OvX+M30Fs0yZxPzbBZrPdUjICPxH4j
uJT6fv8kP5LU36BvGcKaoegNWb8dPA3pyNyS3L7G4X9z5hhXrGvPe9m7qjAf
NMT/AObqlCcV/QTw/qnvQ+fdL3XOKfdmIi3BL+aOHZ1ZZy9jMw3ftdh3waY7
/pcyX8tYHXM7dD/87oUcRXz153dw2Tmn3KvP2CLWbRXfYNsrc27MZP0v6MNS
v41yqAF6DfbHY7s349vQA/3ScM4qdwv0l8CvIu04617o74KvROamfiO9lc7w
H/ic1NwjDhI3jsqdy8ph5fIspEuNOURcpm/St4kT5xSOMcXaBnwOz8yR4hqt
mQ2exL4LSs6PAeCuhd9Wb9wN/FNmLhaH9WTvWuSZar+p3rYR51/OuhV6G3BX
ftdWOUd7gIeFY1n5eS/4NGShchHpCx6ErAOvYv4R2aaO7S+Rg8BnMvZtlW0G
gycqd0t+H3G79tBeeuNu4N/D+fAN+m/gnuHcfRFponwL56pydgh4YHgv8fUZ
4H35hsX83oQ04Pvu0tuUfL/i6mnheqRvGqq9wvEkzvgJPIs9evG7BunE/T2M
7xt1x8gU7u661LVHnCpurRanln1m5fItyB/hGFIs9cvMTbIZyNwe1v9Ydg6I
GxSTik2t0dqFysGycygp/CZ6m8WVb0uRB8McIa4Q54p71yFNwE1z5+4i9jw4
Nyco17RnX/wdgM3H2D6H5PUcs4pd+ZRvcZbu5nfxG/YHM7Y2fCezKjmh3Nin
knvbsb+ibI6aiL44M7cqBhbp/gvnvjhgTOEcVa7WQ5qD767EizhRXD4R/Xls
W6omsH6V6nnZb6Tc35iaC1TDVctbIQNLXtMafEc4v//l+k4Rv2aufbrTLswP
KvxtigH1JvNTc584ULVmZGou1p7nFI4BxYJyRLnSEX11mBPEDTNSx6dqzDrV
dnyNYm6e+Ft8zdybUekZ0OeH8/8N7I4EZ7l7A+VEqvcK59ZX6A9Vegz1GnoD
vUW/cK+gnuF+ra+cXzW9AN8Z5m/VpIXgFmH+Ed+FakeYS8Qpn+uMmXsN1bxF
hX3Kt+r77eGcV+6LE64HHxPmH3HUNtX01Nyj+1MtaZ853+qQeXzPHvQZ2L2B
1OP8bcPxoPj+VDFdeU/xYSPwrnC+KB5UKw/L3dvJZ3Pw34zNqNy3avsnqWNd
9zUw950Ja+xa8APh+vQa+tXgceHapfqiXvOtcA+j/udpxXi41okfl4BfC9db
vc8EcDO+YXO4h1Uv+6++C99jsfkPPDq8t3Lw+bAP+RLnzgG/HK7d8inf/VWb
SuZwcfmF4X5LZ7xHOa4YLjnGx4qTwm8jDpwS5jxxn+JZ3KY9h1T6EcWC1mit
OFhc/H04RlUf1Au0CueK7ldceVY4NrXn3eCTw3enGnIJuHuYT9RzbAHv4s4/
Cb+x3lp38U64Jqo2rs7M3cqROvXCqb9V3zwJvW3m86snm1o4RhQryjHlWovM
36uYnCX+zf2+ypGV+BqbVXpD3VnmGFesiwNqUtf4mZX+/1Lmbw73srpj3fXI
cK+kGFGsPBOOBfXEV4RjUrGpnG0I/q1w76ycOx+9cepapZg9Vzye++3kfyt4
V+FeXTF+R+rYXRnmYHHxmNy1U/VxbeqcUm6J734G/xXmL9Ub/ff5M/wW6if0
30b/IfRfoneYa1TzVPvU86j3+UF8UnbNVu0Wp4pb9R9jAvt9Ga5x6n/0X0Kc
IG5Qj7tU/JM7l/Wfog1rM3w+G+7p1dt3CPdPqme/hntu8afqoWr5ReF6qTvX
3ffMnEuK/2X4/iDcW6vH/lC5H+6fVFOOA/8PMVf2dg==
         "]], 
        PolygonBox[CompressedData["
1:eJwlkU0oRFEYhl9/x713Viw0kWIhdlgqbExZyEZZ61pSRLKTlSyYbKaEpiE/
hTF2mglplLIYRWaBjZ8FsbCYouw8p7N46rzP+b7vnHNv8+jk0ES5pHqoAj8i
7RkpC9sV0mm1FEInOQe7uAFf6g+ks0rpBXcLf7gGep9Zvxq3J9wG5MkzUKI3
Sa6jrkC+gRHqfnD3npQiT8EXdQncHG6V3AaD1L3jQrggz4OHOyLnuF+SnhPc
jvXMT+PiuAw5DQGuyLxu3KZxZ9kzx2CFdQgHZdI4eZa3/TL7GleECDlK/4O9
G1yyd8f8ds4+JO/DInM7yDXULrD/aFy97ctQm8U9Gfdu+/5pzrnivBg5Yd9N
LlCXp+6T/AGN1C3j3/hBw+Q1WPLcfey9eqCVGUHg+u2cPuPOr8XFcSV613Et
0MT8Lu54zNpnfc4P/w6ct/tbxn2fXvI/DM1Kfw==
         "]]}]}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwV02tojmEcx/F7FjvWjDC2FY1RylBzKhsr50TaktNqasphdhAlprChbCjj
zfDWWcnGnObcCsXwQnOWzQshRHOKz/Xi+3x/////uq77ee7nvocsL1+wNiaK
ouE+DsZFUW1CFL3kbM5OjKLX+qN5DOr02+KjaDfnqEehRH2L3+tttucFb+It
6Nav5p+8Vb8Tb+UuPoAH9m43v6s3Tl0jj+HpeCE/R4VZOXpZe5iPoBG56kO8
xdp8+Zg8hW+H74Md4Qy9PHklyuRYXsM9+DSqrZmvfsbzuIMvcAuacB7NuGRt
rdlQ3ycLk9XXeL9eC49VZ3K6ta1yDpbio3oJ78V8a9vVGfI5+QMX2vNYb7G6
SF7Ee9R7cVx9EifCueF38R28l7/wV2yVu9CJd0gL3yPWb3TOU2cMC78XM+Wb
ehHHYLW8Tb9GrkU+zuj1T4qi786tU9cjQf6HVWZXwn3keHUcCtVtfFZvPE/C
KTnRGRPlT/ZP4M9cpH8db+QbvA877d+FFchS1/NgzsMT+TEawj3GX73zfAFN
GGnWzAv0K/gRzw33kqvMKtHHtVKR5vu0h7lcGq7Hf9Sl/JtP6K3j3uoUNHje
G511GIdwFVXmGTwID+Uy3sNr+AEP5ORwj+29r850zXtcHf4fs06sN9+AJCSi
0nw2z8Gs8Az6e0qsOx3uY3juw3tk/2bUhXcOq7AarWbPuQO51h5Vv3LGUdcf
4NoJuKw3y6yPNQV8Mfx3+r/UMVysl4PRGBWeYSTZn2x21do4rrW2RJ5jVszd
4Z3zfGWYpSPSn+G6P/mPWZJeQXhXeSovDM+HM5dxi/2D9Jt5mllfuR9S0dve
FK7W34ie8jf+gRFyFv4D7/iZgQ==
         "]]},
       "6"],
      Annotation[#, 6, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwV02toj2EcxvFnDGNOyWGjsNlyigwpZk4bCTmTxmptYw61ySasldmEecOc
eUcOcz7HbDlGJhRhxAtF4RWJlAmf+8X3f12/6/e77/t5nv/zJOUVzy2KiaIo
0U96myhqiouiV3iJOFzGJaS2i6IUpLaNoju4jXs4rHcEk3FK/wxOo8Jeu2Ub
6Vt1Dj8JD5CFRmsz6V263cwA2h9zzM7DfMzFBlkZ3plZoF7mOqvVH9U7rX9D
z9Hz2IUalMsWm/1As2lTbBTt4Z/qbbL2oWyoupIfTLPwhn+NVXorEWP2AE2j
++gwup+WmS3mx6Kv+SQk4666n34y+qhP0ON4zA+nI5CAHlhvjzrz62h3dTfs
xZ5wrbJttKf+FppIt9Jr9DrScdOeY+gxeSktUb+wbg1di1JcUo+nEzEBs9QV
ZmfSb+qvqLK+MlyTvJVndEKWwtfSRebmtHSO/miMlb2nf9CMs/oZdFxA7y/N
oMvlJfYopK3VrcJ/itk4L9uoN4o/zZ/hP7fwf/OzZLfoTHrSuTv4J/pF6vvh
mYbnzvcO5+K53rPwn8tq8Ft2mQ6SXaQDw3sbzpZnOqNe3dE+HdBLfiFcDwrk
9bQBCRjg/SqkK8K9oNb6g/QQ2iPefKk9DoRZ/hy9as1qPo9vNJ9L69xDMV8t
345HfL58aTgT09Uz6LTwfYT3GC3UMciXHbF+Cn+Dn0q/4BOOOqs5fEfyNPVI
HOeH0GprCvgN+mVo4NfTzahCrnqauRz6S/0T//A3XHv4ZqzPdG8TsDC8A+Eb
l//QX8Jn45o6MT6KroTvxlwXvis6o1N4xrQ8vOOI5b/Tn+jPJ+M/9TWPMg==

         "]]},
       "5"],
      Annotation[#, 5, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwV01toz2Ecx/GH/W1sbUUOccH+LuQwNyZzuFoOo3AxtRlKKef2d7gYEiNr
44ZMDiOHmckoplAUpUgRLcJcMGbYlmERKeT1XLx7f5/P832e3/P7/Z9/csWG
4lSfEEIP0vuGUJ8RwrX+IZzhCj6PRpzEKfyUt/DNASE8ygyhwPiWehIXoU39
BpvNbUKG3uM8mes4n6/wPL7Mc/mI/n58mBOckjfzdvuNlBWq82QTsU/WxHt5
PE/AcIzANtlCbuU7vMS621zG91EjHxfX2rNdXcPveAs/j+/LL3grV+OX3grj
xdzGpfyWy7iWH8ZvgLHqEtkYLsQz2VOska3GP9mheH5nqOW8+I4oxznjaTyK
c5HEXeOq+O7qA/bpVu/nrvjOXMfv9RyL72O8C5X4gh7stm6o+c/qZj3d6mL1
N3mp8SJ1CXfKu9COGbIW8wvkB9NCGBLvgGwwV8qv80pzf+JvhBMuTZPxJflF
3snzrUvG+2J+dLw7nMsfrf+ED5juntVzA85ij7Xr9T3hdfw4flf38B5nGWcj
J35ne5fLEvFeGWdiozMM41V4JU/F3z2ePZ4bg/Agfiv7vXaOo3Edd+hNU69N
OAM3oAitztbJMzEbs7BDz0DOR4F1UzEFHcYXPL/R/tX2bIj3KP6enr9c/Tv+
V3BaX7q+v+oelBm/tH6Znqt6v8uWynr5K27I55ivcuYc4+wsz4//hXhmdS//
iHdNncR/b7WBHw==
         "]]},
       "4"],
      Annotation[#, 4, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwV0T1IlWEYxvHHj5NfBIHhpKRWmHjIwQ+EhAZBHVyMoKYUCaklF12aosHB
o4KTRqaCB2xpcBFBBZUKozqCkH0gprQoiWCKgmH2e4c/131d930/7/O+b0lH
150naSGE16jPCiGVG0Kv4Iw+xIlsMjuEJFrwSVYnG1VX0WZs54SwhTF1jX4l
/cy3q9vwip82P0p76AF9QYcxgpv4GJ2NR4jrL9By2oCvzlpHkD123rmsKZ3P
C+EN3yhfwQe0Y1G2jCX0mB2UddMf/H31PUzZv8GX4RTfvfM5LUQRdvkhO+/V
12idnRJ6G6vukkK13jC/SY/4u+pDWs/fwjPM2OuU/5Of4SqfkO/IBvgE+tEX
fUOvlKRXzNS434n6GGvmy91nS74d/Qf+nf0YvYA5zCMfl1Ga6XvYiztvnK+1
M0Gf29mgD/gC/XysyNroT9kmfunHPKuP5sXcUX+Wz+ZzcMnsUPTdzO7Sb3SH
pjyrQi9pPk7/4hSTdsfoRXOHGSHs0S/m15Gm94ffx0u9Vvo7ur93f0rT/d+3
7nCdFuM/bZpgpQ==
         "]]},
       "3"],
      Annotation[#, 3, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwN0UsopmEYxvHbKacpC+sxjRxKTVFKmpqkpJFTxMYpH2XHwsLOrCyM1Ldg
FAuxMGOHWY0NCxElh9iwY+ccFuzmt/j3v+7ruZ/ve3vfz4mRtuGUiPiB1ayI
P1jPidjAGmozIt4zI1r0N+Zm/o03XRMf6qrlRbmSv+M6O+IKi3LC+Sv38wsv
2HvmBt7Xlcvz8heuw6V7F1iQe50/cQ8/8i97D1zPe7oyeVYu5Vqcu3eGebnb
+T0nzXc8Y++Wt7gKB0hgCMX6bS7kGpy4c4xWXUWae/IN3r2jI7/baOdnakSB
8yX9V/2OfsD8EZPyhPO/3GZekft4y/xg9x93mGf0+TxunvYRUjkNc/pO/aZc
YD/JJeakPlPO859T9kflbP20vp139af2x/QfzN/0y571Sc6yf6c/Q5duMN03
tF+UG/EJ/wEf0kkN
         "]]},
       "2"],
      Annotation[#, 2, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], 
        LineBox[{202, 282, 232, 189, 517, 1396, 1850, 2208, 1845, 1386, 2123, 
         2037, 2659, 161, 147, 133, 119, 105, 91, 76, 61, 1566, 1572, 46, 220,
          31, 345, 212, 278, 16, 286, 203, 1414, 255, 1123, 2846}]},
       "1"],
      Annotation[#, 1, "Tooltip"]& ], {}, {}}}],
  AspectRatio->1,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.622110121347879*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJy8fQV4VUf6/t0CBeql3e525bdda7e7bXe31IXg7i5FAlHiJJAQI+7BXZIQ
3N2d4O7u7hCiEHn/882cOWfOzeWm3dznz/OQkttz7513Zr53Pp82zkEerj7O
QZ4DnD9oNsjZ38NzQOAHTf0GsZeq/cpi+dV29nfrBxb6NywW+YP/yaEf2i+V
/Pu3/D/V8Pz5c2h/LDW110qU1xprrwHleF5Swn9rb+O97fTXSip8XllpCUpL
yyt+nnjWUkt+b8lzlJaVmz6PxlKufV41MfT3+H/exPVzBzA8KRbh4eFIHTUR
F2894c89f3ILE0YkYlnOCf573oPrmDYunT8XnZCKXccuWhrxz3gbF47uQHJc
FP9/I8Zn4sbDAv6egrsXMTI1AVuPXcP1U/uQmpiI1NRUJLH/JrK/8bExmDp3
KZ6xT2nAP6s27l45idGp8fyzEtLH4uSVe/yzHl87iZTkJOw6dUuDQD9LsH7+
NCxZv1cby1u4eno/0hJi+PtTRk/F5bu5/P3FDM+o+ERs2HOS/15SnI81C6Zj
WEQEIiKjMGPxehQ+L2ugQaKZPXs4B0mxw9hHRWDExGzcfCxg5d65iLToBOw8
don//oT9njluBCLoo4ZFY+6KzSh4Vqat0hs4nrMcU7M5TP6nNO8epoxKwsLN
R/jvhY9vYfrEkXzIUfHJ2H7oLK3WS2Khfq2NqPDBVQzzd0dU6mTsP7Ab8eEB
CIofi9znZSh5cgMThsdjac4p9vFFmJIaCa/gGOzYux/Tx8TB1Wswzt/J1Sa5
Dh7fOI0hngOQPHYG9u/LQfhgL0SOzEIR21+Fd89jREo8Nh25jvybpxDg2hsD
/IYge/Y8zJo5E9lZWVi2Pgds19bnH/cKnufdRXyIH0Lix2Dv/r0YGRMEv6FJ
eFRUiifXjiM5KRE7T902lq0cM1JDMCp7paWhNqKCB5cR4uuJ2JEZ2LdvJ+KD
vRCSMAH5bERFuTcxIj4e6/ceZ28tw+o549DP3Q/LN+3AtrWLMNCtPzJX5NCc
1dcm69GNE/D3dEXqpDnYt2cbIvzdEDNqBp6zZ3LZrkyJjsPOE5fwvOgRRkT6
IiCUTda+Q9i0ai7c3QZg2tIcfflyFoxH8LDhKJTL9/QOW74ELNh8FCh7juxR
sfAIjMT2Pfsxa2ISXNwDcPLGI9Py1cTRLQvg4h2CSw/ENrhzZjcGurhj99mb
2n6uiQcXD8HXxRWbj17hz5Tl30TEIE9krNqrLV1N7Fg2jX1bDO4WCIG+dGA9
PFy9ceLGI+1zatA7sWP1HPR39US2mBhNPmri3J41cHf3xanbeWIz3zgGb093
rDl4RXt/LRzfuxmZbJmzMjORmTkN4YO8MSgkEiu27GWfrE1yTRxYPRMe3sG4
nisY7PapbXD3GIg9F+7rIlr89CaGeroha9lOy0vaa+umj4LfkJHIL4FFftaW
eRPgHRSDB8Viki/sXQWXgQE4cfOp/lm3z+3CgAEDaSvpn7VkYioCglORVyYh
VsPOxZMQFjsKRey36trnP7l+AgFuLli7/zz//PKie4gZ4oWJS3IsViu1Zc5o
hCaMRZHGmOX5tzGMPbpk10l9pc4f3MCgh+OqHC+bl8zkSCRPXKGv1LJJ8Ygd
nY1S7YlnDy8hOMATm45f1YZFK1WKnDXz4NbXGSMmL8DTZ6WaSNTErlXZ8B06
HHna+VD+PBdJg/3ZVO7XV2rN7NHo9dMApI8Zg1GjRmKInxd8AoZgzoot9L1y
dlewGR+SkAF50jzPu40wHx+s3HFOn93HN47CzdkNa3NO67O7Z0kmfHyj8KCo
zOKkSO/ssYmIGr1Afy7/7gUEevhg25Hr+ufdubAbA/p7YvuxG/pz80YnMFFL
R34lq3X1xDZ4DgxhnFWgjZh954hYNp0LrVdrfTYj3qQxkOuA4nuIDvPD7A2H
9KGc27cGHn7DcPXhM2Mo6VFIGDGXy4acpoXjYpEwdrq+Ys+fXkNwoDdW7Dlv
eZk/Ux2n966Dj0tvJE+YiXx5XtREzvJM+EaMZi/J9+ZjNKPEKXO3asN4GY+u
n0awvw8WbTvOH5k9PBzjZq2W670sYziGpAiOoj+l+Q8Q5zsQizce1df73sU9
cHdxRkTKZNx8mIvHty8jJcwfIckZeFYGY41KMXNMPKLHL9EBF96/ijAPT6xn
YOQ2Li16jGnDY+EfMgxrN2/H4lmT4ePlg2Xbjuo6RsX1qYbLRzbBwycM5+8W
6Z+/dCz7vuTpRBCWX5nXaOPMkYhMmqAfgHh2HzFsjeZvO6qv0dkD6+ARMAzX
Hz/XP3Lu8GgkjVtsWqPF4+OQOG4WfQ3/U8LWKGSwD9YeuqSrSmf2rYWH8wDM
Wbdfl8ZtK7LgN2wMCqRm9bwAo4b6I2PxLl0aj29bDA+vIJy5dh/zR0VibPYK
XRqXZI5ESNoMyLeXFjxArJ83m6pT+nQ+vHaITd9ADAkOQWDQYAR4e8B3SCSO
XbmjjZ+eLEP2mATETlpqLA072kO9vLD54GVtLC/j+O516O/sjFCmUAz284Rv
YCLu5D5roP1vkojCAnEk7Vk2Ra6QXKBLx7bAwzcMF+8bC7RkXAJiRszhs2m1
QDlLJsIvIgVPtN377NFlDPVzxfI9p3Vwl49uYwdNAM7cfColDaNjQpAyZaU+
yauzUzEkcbxOnU9vMtb1csOWEwYvPHv6EHt2bsetJ8bQZqQMQXjaRBJifaH3
rZsLL79oPCwUS13GGDvczwfZKw8Y9Fn+DHMnJiA8fiTGxA/F+Jkr9QVbO2s8
Ahh9FmrSXMQwBXgOxOrd53RMBYySBw30wbq9p3Hl3EkcOnIcV67dxNO8Qh3T
AnbCDI2bopPC4xvHmcbhjZxj1/XPKX/+FKOY0hM1bg6KSsq4sjrEwxlzNskN
SCv2DFnjh2PSzCVYkjESEXGjjRWriRund8PTxRfHLj+SOxuTkiIQN3aRNeUR
O7r1H4itR6/xB2mmBjCl48yNJ/qICh+yFfRxRcZybqrgzrk98HEfgJV7zujI
Tu1eAZcBfjhw8QF/ZvPCqXDzDsX1R4U64RTfPwd/936YvHi7WIXiXIyN8MWw
kRmGBlgT987vgxc7XlfvO8sfO71zOVzdBuLApfv8lCPqKH58A3HBvujVuw8m
z9Zp7/LBdUzl8sCu0zf5W/euzobrwEE4dzdfH0V5SQEmJYQgNGUazRmfy8yR
MUiatkxVSE5uXwhXD18cufqIC8im+eMZp4QxBeWZsVTPHiM1whsJU5eKbXGP
KZ4D+yF77W5lqcpwYt8WhAZ44adevTEsaby6VM+Yth0Z4IaJCzfxj7h/+RD8
PQYwXj9mvVTl7BiYMSoObkyVSU1NYtztignzN4BptfqI6Nu2r5gONzYJicmp
CPR2Q1TaJDwpLtWXqrTwISYkhDOZHozUlAS2bO6YsXo3J1vjc0qxceE0uLq6
IT45DdHhIXBn35tz9Ir+OSgvxqJp6XDz9EFKSgq83ftjVOZiOnO0E64arhzL
gXvvXhg3Y7kuTGXP89iERzPSH4RUps17uPRnzLmJf79krGtn9iPIxxNDI2KQ
GBvGtE8fbDx4Tn51SeEDjE0cCi+mnqQmsClxGYB56/ZwOlKnYu/6OfB0dUVs
UirCh/jBNyQGF24/0fSF6si7ewUpkYEIiR5JKnl1/a3l2LN2DptFhp69dbCP
B8ISx+BhQYlclPc01nhe+BQHdm7F0mXLsefwKRSXQtukNbhCf+bofixfthSb
d+zFk/xi7ZtroDjvMXZv24hly1bg4IlzKClX31eCs8cPYsWyZVi5ZgMuXr+n
v6/0WSGO7N3Bvm8Zdu4/SmamflQR4mN7cnD0zGX9+WeFudi3Ywt7fgX2HT0F
ZuDp6sfDW1ewYfUKLFu5Gqcu3pRvKcp7hF1saEuXrcShk+eJrIyhsd8unjqM
lcuXYu3GLbj1MNfSRPv6RzfPY/uuA3SqGc+Xl+D8CYKyFBu378KjvCLpNODb
/Rf4R97VvmbWrFmIjWXKVUICQ0I/qyE5OZk7Aei3t228VqeS59i/KjwnX3P0
c/8/vqMqz8nXaJ60122+VudnPsfX6Fe0ZL/C3Llzf2VeTVrJNWvW4PTp0+xJ
+lkNQ4cOxfr16/lvb2uvhYSEYOPGjfy3OtprQ4YMwebNm03PDR48GNu2bTO9
durUKQQGBmLHjh36aydPnsSgQYOwa9cu/fNOnDjBX9uzZ4/+3LFjxxAQEIB9
+/bpzx09epS/duDAAf21w4cPw9/fH4cOHdLfy/7NX2P/T3+OvYe/l32G/hz7
bP4a+y79OTYGPhY2Jv05Nlb+Ghu7/hzDxLExjPpzhJ/mQZ0rmieaL3VeaD6D
g4NNz9G80/yrz9H6hIWFGWv0K6xatepXYl1Nq0l76Ny5c/rRJ1+7cOEC/+1t
7bWoqChcusQ9XuybxWuRkZG4evWq6Tn61ps3b1Z47t69e6bnaHc8ePDA9Bwh
e/SIK0CWt7TXysrK+Czk5ubqz5WUlPDvKSgo0F979uwZn8GioiL9O9i/+Wvs
/+nPsffwz2OfoT/39OlT/nnsu/TnHj9+zMejjpnGS+NWx3z37l0+++pzt2/f
5vOlPkfzRPOgPkfzOWzYMNNz58+fR0xMjOm5M2fOICkpyVijX4klZa/ZWE32
v0yrGR0dzT9B/URi5Fu3bpm+eebMmbhz547puezs7AorV15ezhGzVdZfo1XK
ysqiWdM/r7S0FJmZmXzl5HO0cvRaXl6e/hytkvUKFxcXIyMjA4WFhfp72b/5
a+z/mVaTPo9WWD738OFD/nnqqrPP5s+xMenP0QrTmNVVp/dOnz6dMOrPXbt2
je8Oda5onmi+1Hmh+ZSvyeeuX7+OOXPmmJ4jziIOVVaTvfRzV5M+jT6Vfmur
rAiNmo1e9/mTPBBikhH5Gpt1/hrtffna/fv3+SrTb/I12quM9+2MUKhUtXD1
/ClsZTy15+BRPC0WNlLZ82KcP3MS1+8+Fo8xteXOVezYthU5O/fg7qM8aaaq
+Phb59n8Ms0ff2DzUngw9S4yJhZ+zKqMGZGB3GdlKGG2TpBHL4ycJ2yUW+f2
I8TXA4NDIxEymGmQQ+Nw8Y7hR/y531oHz3NvIirAA6NmrSZtDzdO7oC3a3+s
3MvMnNJiXL5wFrcePOV2aGZqJIbEjsPjohIUPrqOYUEDMSJ7jeHJ//lfXBPX
T25kOrYfjl+V1uAzjE8YiqSpq3QYzx9dQzgb3IKck7ohvXXuOARFpeApUxnV
b7Um+PHjxzM7wZWLEv/4LDESK1ZhT14+vAKefpG4dL9Y/8RFo+MQp/nO5GvF
9y4hzM8T245f0V87vG0+/MLicb9IPleDqxhEHvHx8ZyYZs+erZvzaSnD6Evx
xY8t0TV0JrqFzWaj6xY6cxz9YB/YIXg6oiav1z5evIkkjj6IPpC4OS0tzWIM
/8K+xXDzjcAFxVO1eEwcYlKzufEiXyu4fQFDvd2x5fhlY/jb58MrJBZ38sv0
4ZOWtG7dOs6ntJRMEnUDCOWlSIgN5hBq/uFLfNA+kf1lrP1Bu8Sx9IN95vst
Y9F16AwTAuIX+iz6TDq32RRZjK1w6ehqeHiFMgRmX2jc6AX6Vnh2/zLC/Adi
49FL+ugPbJwJ/4h4PHxmeyvU1EZdzkY9LDwA1V+y4M2//YAPO6fgwy6poH+M
oR/sfX9ql4BeEbNVPrDeKTXx8Mph+DH7dtOhy9qWfYS4EB+MmbtZH2h58QPE
h/pi7NwthpdvTDRCEyagyGrPSkmprXFIz+4d+NS+80lLfNRteGUDrChU5aUF
mJoWDv+wBBw8egKLM0fB1d0Xx64+sBgWaDm2LpiE/u6DsGHXIWxfuwiu/V2x
eNtxm/xRS/tK0t/+8ucPUOfd9/HuP5zwx4Y++KhLGh/k6F8ySPrzhG3G8SOS
EDwkGGER0Vi/64jJ0n5e9BgLM8ZhKFNPQkLDkbV4A4pLym2Nr6Y2Sjp3mzR2
4hPYpHFbdOkdgHf+2QR/aOitj3PUzx6nXCayXp8+zUXx81I9/lyQ/xQFhcXa
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
Agb+jZ9Xz3AANa7MzZs31e/DgdQ4kfvWrVvqPWNF2MoYK6Tee/DgASutvX37
tnr28OFDSE5OhoKCAvWzxv+zZ8b31HvGqrPfZ+yCei8/P5/9Pnwm3zN+N/ss
xmdS7xmflX1m47Or93AEEz4zMKr3MA2CPKJ0rXCdcL3ouuB6YqkwfQ9PEJ4k
+h7qaNQ+xe86NZPl/V2KPDt//rz2G8eNGwcXL17U/jIWLOMnp++NGTPGbdfx
PTyb9D3cXVwJ+h5Wd+OK4Vcvk13Hlaa7ibuOq4XyIJ+hjCB9gLHT6m/gruMz
uku4m/j7UG7keyhL+PtwR+R7xolin4d+Zvy8+LnpZ8aTi/qdvoc7h+tF38N1
wnWg7+F6InMsfQ/3IjY2VnsPJcvYObqbFotF7qZMExrfNt7E/3oxYgVsHsCv
XhHPcJfS0tLYV6+KZ4gCKZDpe4gWh6HR93BVDhw4wL56WTzD6Vm4qgcPHlTv
oY2Azw4dOqR+H55L3JEjR46o9zIzM9mzY8eOqWcnTpxgfLrHjx9XP2v8P3tm
fE+9Z/wM+1njd6j3jN/Nnhl/S71nfAb2WYzPpN4zPit7Znx29R7iQnx0Dfbv
38/Wga4BrhOuF30P1xNPEX0P1x3Xn76H+4O7rvboOTQUn3NLf3pBYmIiDBgw
AAYOHGi8if/1Mm7VweDj48O+esXm2av/gu/h1+K57bNXLc/sfpb+jX+l93x9
fdUztkfP4ZY9B1OnTpUWynP/Dzdh59Y=\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "[", 
  RowBox[{"0", ",", 
   RowBox[{"w", "/", 
    RowBox[{"(", 
     RowBox[{"1", "-", "\[Gamma]"}], ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.622110043901154*^9, 3.622110073893705*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{"w", " ", 
   RowBox[{"(", 
    RowBox[{"1", "-", "\[Theta]"}], ")"}]}], 
  RowBox[{"1", "-", "\[Gamma]"}]]], "Output",
 CellChangeTimes->{{3.622110054565866*^9, 3.622110074317761*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1184, 610},
WindowMargins->{{4, Automatic}, {Automatic, 4}},
Magnification:>1.25 Inherited,
FrontEndVersion->"10.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (June 27, \
2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 97, 1, 114, "Title"],
Cell[680, 25, 478, 8, 85, "Text"],
Cell[1161, 35, 234, 4, 61, "Text"],
Cell[1398, 41, 349, 11, 36, "Input"],
Cell[CellGroupData[{
Cell[1772, 56, 274, 8, 36, "Input"],
Cell[2049, 66, 331, 10, 58, "Output"]
}, Open  ]],
Cell[2395, 79, 234, 6, 36, "Input"],
Cell[2632, 87, 130, 2, 35, "Input"],
Cell[CellGroupData[{
Cell[2787, 93, 675, 21, 62, InheritFromParent],
Cell[3465, 116, 1708, 33, 427, "Output"]
}, Open  ]],
Cell[5188, 152, 169, 2, 37, "Text"],
Cell[5360, 156, 347, 11, 36, "Input"],
Cell[5710, 169, 49, 1, 35, "Input"],
Cell[5762, 172, 209, 5, 35, "Input"],
Cell[CellGroupData[{
Cell[5996, 181, 838, 20, 36, "Input"],
Cell[6837, 203, 65330, 1459, 666, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72204, 1667, 561, 13, 36, "Input"],
Cell[72768, 1682, 6170, 170, 100, "Output"]
}, Open  ]],
Cell[78953, 1855, 543, 16, 36, "Input"],
Cell[CellGroupData[{
Cell[79521, 1875, 153, 3, 35, "Input"],
Cell[79677, 1880, 163, 4, 55, "Output"]
}, Open  ]],
Cell[79855, 1887, 366, 11, 36, "Input"],
Cell[CellGroupData[{
Cell[80246, 1902, 1061, 30, 57, "Input"],
Cell[81310, 1934, 2149, 42, 611, "Output"]
}, Open  ]],
Cell[83474, 1979, 187, 4, 37, "Text"],
Cell[CellGroupData[{
Cell[83686, 1987, 367, 10, 36, "Input"],
Cell[84056, 1999, 171, 4, 35, "Output"]
}, Open  ]],
Cell[84242, 2006, 218, 4, 37, "Text"],
Cell[84463, 2012, 205, 5, 37, "Text"],
Cell[CellGroupData[{
Cell[84693, 2021, 228, 6, 36, "Input"],
Cell[84924, 2029, 113, 2, 52, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85074, 2036, 214, 6, 36, "Input"],
Cell[85291, 2044, 153, 3, 57, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[85481, 2052, 333, 8, 35, "Input"],
Cell[85817, 2062, 111658, 1878, 466, 66872, 1142, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197512, 3945, 225, 6, 35, "Input"],
Cell[197740, 3953, 223, 6, 58, "Output"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
